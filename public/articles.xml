<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-06-20T04:17:36.279Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[你不能相信谷歌]]></title>
        <id>https://world.hey.com/dhh/you-can-t-trust-google-f7d64064</id>
        <link href="https://world.hey.com/dhh/you-can-t-trust-google-f7d64064"/>
        <updated>2023-06-20T04:16:49.440Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://world.hey.com/dhh/you-can-t-trust-google-f7d64064">You can't trust Google</a></p><p><strong>概要：</strong></p><p>文章作者 David Heinemeier Hansson 警告，如果 Google 无法通过广告直接实现数十亿规模的盈利，那么它最终会关闭你关心的每一项服务。他认为，Google 在产品或服务业务中的能力有限，因为这些都不是 Google 的主要收入来源，广告才是。他以客户服务为例，指出 Google 的客户服务一直很差，因为帮助解决 Workspaces 或 Google Cloud Platform 上的问题永远不会像帮助广告商获取注意力那样有利可图。他提到了 Google 刚刚关闭其域名注册商 Google Domains 的事情，尽管这个业务每年可以带来 1.8 亿美元的收入，并服务了 1000 万个域名。此外，他还提到了 Google Home / Nest 的失败案例。他建议，无论是协作、电子邮件还是家庭安全系统，用户最好都有备份计划，因为任何标有 "由 Google 制造" 的产品或服务都可能随时被 Google 放弃。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - kaleidawave/ezno：一个用Rust编写的JavaScript编译器和TypeScript检查器，专注于静态分析和运行时性能。]]></title>
        <id>https://github.com/kaleidawave/ezno</id>
        <link href="https://github.com/kaleidawave/ezno"/>
        <updated>2023-06-17T04:50:19.451Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/kaleidawave/ezno">GitHub - kaleidawave/ezno: A JavaScript compiler and TypeScript checker written in Rust with a focus on static analysis and runtime performance</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Ezno，一个用 Rust 编写的 JavaScript 编译器和 TypeScript 检查器，重点关注静态分析和运行时性能。Ezno 是一个 JavaScript 类型检查器，可以作为库使用，也可以与可选的编译器基础设施（解析器、CLI、LSP 等）一起使用。它提供完全类型化的程序，保证类型安全，并旨在通过更好的静态分析实现类型的准确性和追踪。此外，Ezno 还具有命令式类型系统，事件追踪和评估函数副作用。

然而，Ezno 并不是一个二进制可执行文件生成器，它将 JavaScript（或 TS/Ezno 超集）编译为 JavaScript。此过程更像是编译而不是转译。尽管你可以使用其事件 IR 生成一个较低级别的格式，但 Ezno 目前还不能使用，离实用还有很长的路要走。

此外，该项目还包含了一些箱子，如 checker 和 parser 等。同时，作者也邀请读者参与贡献，查看问题并参与讨论。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4的本地JSON输出]]></title>
        <id>https://yonom.substack.com/p/native-json-output-from-gpt-4</id>
        <link href="https://yonom.substack.com/p/native-json-output-from-gpt-4"/>
        <updated>2023-06-16T05:57:17.063Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://yonom.substack.com/p/native-json-output-from-gpt-4">Native JSON Output From GPT-4</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 OpenAI 在 2023 年 6 月 13 日发布的新功能 —— 函数调用，该功能使得在产品中集成大型语言模型（LLMs）时生成结构化数据（如 JSON）变得更简单。文章通过一个名为 “食谱创建器” 的演示应用来说明这个新功能的使用方法和优点。

新 API 引入了两个新参数：functions（一个包含可供 GPT 使用的函数数组，每个函数都有名称、描述和参数的 JSON Schema）和 function_call（可选地指定无或 { "name": "<function_name>" }，可以强制 GPT 使用特定函数，或明确禁止调用任何函数）。通过设置 function_call 参数，你可以从 GPT 调用中可靠地获取 JSON 响应，而不再是字符串。

此外，新 API 还改变了我们与 OpenAI LLMs 交互的方式，除了明显的插件使用案例外，还可以生成 JSON 输出。以前需要通过提示工程来完成这一步骤，但这种方法对于简单的情况效果良好，但容易出错。现在，通过对大型语言模型的低级访问，你可以做得更好。例如，通过降低令牌使用，可以使 API 调用更快、更便宜。

最后，作者认为新 API 的另一个优点是减少了生成正确输出所需的提示工程，使得 LLMs 更容易作为无代码后端使用。并且，OpenAI 的 API 似乎支持 JSON Schema 的特性，如 #ref（递归）和 oneOf（多选），意味着你应该能够在单个 API 请求中通过 JSON schema 实现更复杂的代理和递归思考过程。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布Tauri 1.4.0 | Tauri Apps]]></title>
        <id>https://tauri.app/blog/2023/06/14/tauri-1-4/</id>
        <link href="https://tauri.app/blog/2023/06/14/tauri-1-4/"/>
        <updated>2023-06-16T04:46:06.846Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tauri.app/blog/2023/06/14/tauri-1-4/">Announcing Tauri 1.4.0 | Tauri Apps</a></p><p><strong>概要：</strong></p><p>Tauri 团队宣布推出 1.4 版本。这个版本包括了一些新功能和重要的错误修复，比如 CLI 补全、单元测试能力和 Windows 安装程序的改进。确保更新 NPM 和 Cargo 依赖到 1.4.0 版本。Tauri CLI 现在可以为 Bash、Zsh、PowerShell 和 Fish 生成 shell 补全。窗口的最大化、最小化和关闭按钮现在可以通过配置或 API 调用来禁用。1.4.0 版本包括了几项 NSIS 捆绑增强：自定义语言文件、自定义安装模板（.nsi 文件）、支持荷兰语、日语、韩语、波斯语、瑞典语和土耳其语等。如果你的应用程序是通过 WiX 安装的，安装程序会提示用户卸载它。Tauri 1.4 仍然支持 Rust 1.60 版本，但由于一些依赖性不兼容问题，我们不再固定 time, ignore, 和 winnow crate 的补丁版本。tauri crate 现在在 test Cargo feature 下暴露了 test 模块。这个模块还不稳定，但允许你通过创建一个可以在不生成窗口的情况下执行的 tauri::App 实例来对你的应用程序进行单元测试。从 v1.4.0 开始，我们的更新日志格式已经得到了改进。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fresh 1.2 - 欢迎全职维护者，在岛屿之间共享状态，有限的npm支持，以及更多]]></title>
        <id>https://deno.com/blog/fresh-1.2</id>
        <link href="https://deno.com/blog/fresh-1.2"/>
        <updated>2023-06-16T04:45:27.494Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://deno.com/blog/fresh-1.2">Fresh 1.2 – welcoming a full-time maintainer, sharing state between islands, limited npm support, and more</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Fresh 1.0，一种现代化、以 Deno 为首的全栈 Web 框架。自去年推出以来，Fresh 在 GitHub 上获得了大量的关注，并取得了显著的增长。然而，对于 Deno 团队是否会持续维护 Fresh，人们一直有疑问。尽管团队一直表示会坚定不移地维护，但现实情况更为复杂。由于主要维护者没有足够的时间专注于 Fresh，因此很多问题得不到及时解决。

为了改变这种情况，团队找到了新的主要维护者 Marvin Hagemeister，他是 Preact 的维护者和 Preact DevTools 的构建者。他将全职领导 Fresh 项目的开发。预计在未来几个月内，Fresh 在易用性、功能、性能和项目维护等方面都将有显著的提升。

最后，文章介绍了 Fresh 1.2 的一些亮点特性，包括传递信号、Uint8Arrays 和循环数据到岛屿属性，支持自定义 HEAD 处理器，HandlerContext.render 的状态和头部覆盖，./islands 文件夹中的子目录，异步插件渲染，简化 Fresh 项目的测试等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js中的调试介绍]]></title>
        <id>https://blog.openreplay.com/an-introduction-to-debugging-in-nodejs/</id>
        <link href="https://blog.openreplay.com/an-introduction-to-debugging-in-nodejs/"/>
        <updated>2023-06-16T04:44:13.520Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.openreplay.com/an-introduction-to-debugging-in-nodejs/">An introduction to debugging in Node.js</a></p><p><strong>概要：</strong></p><p>本文主要讲解了 Node.js 的调试技巧。Node.js 是一种使用 Google Chrome 浏览器的 V8 引擎的流行 JavaScript 运行时，可用于创建服务器端 Web 应用、构建工具、命令行应用等。然而，当代码出现问题时，情况就不那么明朗了。调试是修复软件缺陷的艺术，找到错误原因可能需要花费大量时间。

为避免错误，作者提出了以下建议：使用带有行号、颜色编码、linting、自动完成、括号匹配、参数提示等功能的好的代码编辑器；使用像 Git 这样的源代码控制系统来管理代码修订；采用像 Jira、FogBugz 或 Bugzilla 这样的 bug 跟踪系统；使用测试驱动开发（TDD）；尝试代码解释或配对编程等技术与其他开发人员合作。

此外，文章还介绍了如何通过环境变量、命令行选项、控制台日志、Node.js V8 检查器以及 VS Code 等方式进行 Node.js 调试。最后，文章还提供了一份关于调试的术语表，以帮助读者更好地理解调试过程中可能遇到的各种专业术语。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[完成你的项目]]></title>
        <id>https://github.com/readme/guides/finish-your-projects</id>
        <link href="https://github.com/readme/guides/finish-your-projects"/>
        <updated>2023-06-15T10:41:48.487Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/readme/guides/finish-your-projects">Finish your projects</a></p><p><strong>概要：</strong></p><p>这篇文章主要讨论了如何完成一个项目的挑战，以及完成一个项目所带来的满足感。开始一个新项目总是充满无限可能性和乐趣，但随着时间的推移，这种快乐会逐渐变成痛苦的工作。许多人在这个阶段失去了兴趣，放弃了项目。然而，只有坚持到最后，完成项目的人才能体验到深深的满足感。

完成一个项目需要付出努力，也需要勇气。首先，你需要接受这个事实：完成一个项目不可能一直都是有趣的。你必须习惯于项目的最后 10% 的艰苦奋斗。其次，你需要克服发布项目的恐惧，这通常源自于害怕自己的工作和自己受到批评。

作者分享了他的生产力方法：设定一段时间，提前决定要做什么，全力以赴地专注于那件事。他还建议找出适合自己的方式，给自己每一个可能的优势，因为完成工作是困难的。

完成一个项目本身就是一种奖励。无论项目的结果如何，你都应该为自己感到骄傲，因为你已经完成了一项任务。你是一个能够完成事情的人。不断地完成项目，你的工作成果将随着时间的推移而增长。完成是一种技能，你可以磨练它。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - 7PH/powerglitch：小小的JS库，可以让网络上的任何东西出现故障。]]></title>
        <id>https://github.com/7PH/powerglitch</id>
        <link href="https://github.com/7PH/powerglitch"/>
        <updated>2023-06-15T10:40:37.360Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/7PH/powerglitch">GitHub - 7PH/powerglitch: Tiny JS library to glitch anything on the web</a></p><p><strong>概要：</strong></p><p>PowerGlitch 是一个独立的库，无需外部依赖。它利用 CSS 动画在网页上产生任何故障效果，无需使用 canvas。其压缩后的大小不到 2kb。你可以通过包管理器安装 PowerGlitch，或者在脚本标签中导入网络捆绑包（或将其保存在本地）。然后找到一个元素进行故障处理，导入 PowerGlitch，就可以使元素出现故障效果了。该项目还提供了优化和使用技巧的使用指南。此外，PowerGlitch 还支持 React 和 Vue 的集成。如果你遇到问题、发现错误或想要贡献，欢迎开放问题或创建拉取请求。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - LeeeSe/MessAuto: 自动提取Mac平台的短信验证码，2FHey的免费替代品；为Mac平台自动提取短信验证码，2FHey的免费替代品]]></title>
        <id>https://github.com/LeeeSe/MessAuto</id>
        <link href="https://github.com/LeeeSe/MessAuto"/>
        <updated>2023-06-15T10:23:31.622Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/LeeeSe/MessAuto">GitHub - LeeeSe/MessAuto: 自动提取Mac平台的短信验证码，2FHey的免费替代品；Automatic extraction of SMS verification code for Mac platform, free alternatives to 2FHey</a></p><p><strong>概要：</strong></p><p>MessAuto 是一款由 Rust 开发的 macOS 平台软件，能自动提取短信验证码并粘贴回车。它可以在任何 APP 中使用，是 2FHey 的免费替代品。该软件支持多语言，占用存储和内存较小，没有 GUI，只有一个任务栏托盘图标。使用方法是通过菜单栏操作，包括自动粘贴、自动回车、暂时隐藏、永久隐藏和登录时启动等功能。但需要注意的是，ARM64 版本打开时可能会提示文件损坏，因为需要 Apple 开发者签名才能正常启动。作者开发这款软件的初衷是希望将 Safari 浏览器的自动获取验证码功能扩展到所有 APP 上。使用此软件需要 macOS 系统，并能接收 iPhone 的短信，还需要完全磁盘访问权限和辅助功能权限。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你可以停止对React.FC的憎恨]]></title>
        <id>https://www.totaltypescript.com/you-can-stop-hating-react-fc</id>
        <link href="https://www.totaltypescript.com/you-can-stop-hating-react-fc"/>
        <updated>2023-06-15T08:47:44.021Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.totaltypescript.com/you-can-stop-hating-react-fc">You Can Stop Hating React.FC</a></p><p><strong>概要：</strong></p><p>本文介绍了 TypeScript 5.1 和 React 18 中 React.FC 的改进，使其成为一种完全可行的组件类型定义方式。React.FC 曾经因为在 props 类型中默认包含 children 而备受争议，但现在已经不再包含 children，并且可以返回 undefined、string 或 number。虽然作者仍然建议直接注释 props 来定义组件类型，但是如果你的代码库中使用了 React.FC，也没有必要将其移除。总之，React.FC 不再是一个反模式，而是一种可选的组件类型定义方式。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Astro 2.6: 中间件 | Astro]]></title>
        <id>https://astro.build/blog/astro-260/</id>
        <link href="https://astro.build/blog/astro-260/"/>
        <updated>2023-06-13T03:11:44.817Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://astro.build/blog/astro-260/">Astro 2.6: Middleware | Astro</a></p><p><strong>概要：</strong></p><p>Astro 2.6 是一个大版本更新，包括几个实验性功能已经被标记为稳定，并且可以在所有 Astro 项目中使用。这些功能包括 Middleware、Hybrid SSR 输出模式、自定义客户端指令和 CSS 内联等。此外，Astro 2.6 还引入了新功能和改进，包括管理重定向的实验性功能、Markdoc 改进和语言工具改进等。Astro 2.6 的更新由社区成员贡献，其中一些功能最初是通过公共路线图和 RFC 过程提出的。Astro 团队还与 Stripe 的 Markdoc 团队密切合作，以改善 Astro 中的 Markdoc 支持。Astro 的语言工具也得到了升级，包括 Astro VSCode 扩展和 Astro 语言服务器。Astro 团队使用 Volar 框架来提高语言工具的性能和稳定性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NakedJSX - 在没有React的情况下使用JSX]]></title>
        <id>https://nakedjsx.org/</id>
        <link href="https://nakedjsx.org/"/>
        <updated>2023-06-13T02:35:25.153Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nakedjsx.org/">NakedJSX - Use JSX without React</a></p><p><strong>概要：</strong></p><p>NakedJSX 是一个命令行工具，可以从 JSX 生成 HTML 文件。输出的内容是纯 HTML 和 CSS，除非你选择添加自己的 JavaScript。它不需要设置 Node.js 项目，只需在 NakedJSX 内容目录上运行 npx 命令即可构建站点到输出文件夹中。它还提供了一个带有实时刷新构建和 Web 服务器的开发模式，并提供了一个可选的小型运行时，允许客户端 JavaScript 使用 JSX。NakedJSX 支持多种功能，包括嵌套 CSS、CSS 最小化和去重、图像转换为 webp 格式等。NakedJSX 的设计哲学是纯 HTML 和 CSS 输出、低摩擦、API 稳定性、保守依赖选择和安全合规。该项目目前处于设计更改的状态，但反馈非常受欢迎。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - HeyPuter/kv.js：用于JavaScript的高级内存缓存模块。]]></title>
        <id>https://github.com/HeyPuter/kv.js</id>
        <link href="https://github.com/HeyPuter/kv.js"/>
        <updated>2023-06-13T02:35:02.009Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/HeyPuter/kv.js">GitHub - HeyPuter/kv.js: Advanced in-memory caching module for JavaScript.</a></p><p><strong>概要：</strong></p><p>KV.JS 是一个快速的纯 JavaScript 内存数据存储，受到 Redis 和 Memcached 的启发。它能够处理多种数据类型，包括字符串、列表、集合、排序集、哈希和地理空间索引。此外，KV.JS 支持超过 140 个函数，涵盖了从 SET、GET、EXPIRE、DEL 到 INCR、DECR、LPUSH、RPUSH、SADD、SREM、HSET、HGET 等广泛的操作。它适用于需要缓存但运行 Redis 会过度的场景。该项目遵循 MIT 许可证发布。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[现在WebContainers中已经支持npm、yarn和pnpm。]]></title>
        <id>https://blog.stackblitz.com/posts/announcing-native-package-manager-support/</id>
        <link href="https://blog.stackblitz.com/posts/announcing-native-package-manager-support/"/>
        <updated>2023-06-13T02:33:49.359Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.stackblitz.com/posts/announcing-native-package-manager-support/">npm, yarn and pnpm are now supported natively in WebContainers</a></p><p><strong>概要：</strong></p><p>WebContainers 团队一直在不断改进和重构其构建模块，以确保其速度和安全性。去年他们已经为 WebContainers 提供了 pnpm 和 yarn 的本地支持，现在他们又宣布了 npm 的本地支持，这将使得开发者可以在 StackBlitz 上无缝使用所有主要的包管理器。此外，他们还实现了比本地快 5 倍的速度，这是通过多年的研究和加速依赖项解析和快速磁盘链接来实现的。同时，他们也宣布将于 2024 年 1 月 1 日废弃 Turbo，转而支持原生的 npm。在这个过程中，可能会出现一些兼容性问题，但 WebContainers 团队已经在努力解决这些问题，并承诺将在未来几周内发布更多功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何用稳定扩散法制作二维码 - 稳定扩散法艺术]]></title>
        <id>https://stable-diffusion-art.com/qr-code/</id>
        <link href="https://stable-diffusion-art.com/qr-code/"/>
        <updated>2023-06-13T02:29:06.404Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://stable-diffusion-art.com/qr-code/">How to make a QR code with Stable Diffusion - Stable Diffusion Art</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了如何使用 Stable Diffusion 生成艺术 QR 码。首先需要生成一个高容错率的 QR 码，然后使用 AUTOMATIC1111 Stable Diffusion GUI 进行图像处理。通过调整参数和添加提示，可以生成类似于 QR 码的艺术图像。文章还提供了一些其他提示和示例，包括机械女孩、日本女孩、机器人和户外市场等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS Sonoma 14 Beta上的网络应用]]></title>
        <id>https://blog.tomayac.com/2023/06/07/web-apps-on-macos-sonoma-14-beta/</id>
        <link href="https://blog.tomayac.com/2023/06/07/web-apps-on-macos-sonoma-14-beta/"/>
        <updated>2023-06-13T02:26:14.701Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.tomayac.com/2023/06/07/web-apps-on-macos-sonoma-14-beta/">Web Apps on macOS Sonoma 14 Beta</a></p><p><strong>概要：</strong></p><p>本文介绍了苹果公司在 macOS Sonoma 中推出的可安装 Web 应用程序。这些应用程序高度集成在整个 macOS 体验中，不显示任何 Safari 用户界面。用户可以通过将网站添加到 Dock 来安装应用程序，并可以自定义名称和图标。这些应用程序支持 AutoFill 凭据、摄像头、麦克风和位置权限，并且支持 Web 推送、标记和所有通常由 WebKit 实现的 Web 标准。文章还列出了一些对苹果公司的建议和 Chrome 的改进建议。总之，Web 应用程序在 macOS 上具有巨大的潜力，并且可以成功地融入操作系统体验。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bun v0.6.8]]></title>
        <id>https://bun.sh/blog/bun-v0.6.8</id>
        <link href="https://bun.sh/blog/bun-v0.6.8"/>
        <updated>2023-06-13T02:08:15.614Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-v0.6.8">Bun v0.6.8</a></p><p><strong>概要：</strong></p><p>Bun 发布了一系列更新，包括引入 JavaScript 打包器、提高性能、实现 node:vm 等功能。最新版本还加入了安全密码哈希 API、函数模拟和 toMatchObject 匹配器，以及实验性的检查员模式。此外，bun:sqlite 的.values () 方法现在返回 [] 而不是 null，同时发布了 bun-devtools 来简化开发人员的工作。该团队正在招聘 C/C++ 和 Zig 工程师，共同构建 JavaScript 的未来。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - evanw/polywasm]]></title>
        <id>https://github.com/evanw/polywasm</id>
        <link href="https://github.com/evanw/polywasm"/>
        <updated>2023-06-13T02:07:26.651Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/evanw/polywasm">GitHub - evanw/polywasm</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 polywasm 的 WebAssembly polyfill，它可以在 JavaScript 环境中运行缺少 WebAssembly 实现的.wasm 文件。这个库的存在是为了解决某些现代 JavaScript 环境禁用 WebAssembly 的问题，同时也可以用于调试和玩耍 WebAssembly 执行。该库的局限性包括没有完全验证 WebAssembly、不支持 NaN 位模式等。此外，文章还介绍了该库的性能和实现细节，包括数字表示和 AST 格式以及优化策略等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布v0.18.0 - evanw/esbuild]]></title>
        <id>https://github.com/evanw/esbuild/releases/tag/v0.18.0</id>
        <link href="https://github.com/evanw/esbuild/releases/tag/v0.18.0"/>
        <updated>2023-06-13T02:06:44.327Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/evanw/esbuild/releases/tag/v0.18.0">Release v0.18.0 · evanw/esbuild</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 esbuild 的新版本，主要是为了修复一些长期存在的问题，特别是与 tsconfig.json 文件的处理有关。该版本包含了向后不兼容的更改，建议在 package.json 文件中固定 esbuild 的确切版本或使用仅接受补丁升级的版本范围语法。更新内容包括：增加在线试用 esbuild 的方式、更改 TypeScript 装饰器的处理方式、支持 TypeScript 5.0 的多重继承、忽略 node_modules 中的 tsconfig.json 文件等。此外，还添加了针对 Safari 16.2 及更早版本的 bug 的解决方法，并修复了 CSS 嵌套转换的伪元素问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[骄傲的动画旗帜]]></title>
        <id>https://www.joshwcomeau.com/animation/pride-flags/</id>
        <link href="https://www.joshwcomeau.com/animation/pride-flags/"/>
        <updated>2023-06-07T02:28:32.902Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.joshwcomeau.com/animation/pride-flags/">Animated Pride Flags</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了如何使用 CSS 和 React 构建一个波浪的像素化彩虹旗。作者通过 CSS 关键帧动画、线性渐变等技巧来实现旗帜的波动效果，并且使用 CSS 变量和 JavaScript 函数来动态生成不同彩虹旗的颜色渐变。此外，作者还分享了一些额外的技巧，例如控制旗帜波动的程度、设置圆角、隐藏初始设置等。最后，作者呼吁人们支持跨性别群体，并推荐了一些 LGBTQIA + 慈善机构。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些博客迷思]]></title>
        <id>https://jvns.ca/blog/2023/06/05/some-blogging-myths/</id>
        <link href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/"/>
        <updated>2023-06-06T05:41:07.589Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/">Some blogging myths</a></p><p><strong>概要：</strong></p><p>本文主要讨论了一些阻止人们写博客的迷思，包括需要原创、需要专家水平、文章必须 100% 正确、写无聊的文章是不好的、需要解释每个概念、页面浏览量很重要以及更多材料总是更好等。作者认为这些迷思都是错误的，并提供了自己的看法和经验。例如，作者认为你只需要了解读者不知道的 1-2 件有趣的事情，而且不必担心预测什么会让人感兴趣。此外，作者还强调了个人故事的重要性，并分享了如何处理评论中的挑剔或恶意言论。最后，作者鼓励人们写博客，并表示他喜欢阅读关于计算机技术的个人故事。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何只用一个JavaScript函数就能画出任何规则的形状 | MDN博客]]></title>
        <id>https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/</id>
        <link href="https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/"/>
        <updated>2023-06-06T05:38:13.028Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/">How to draw any regular shape with just one JavaScript function | MDN Blog</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 JavaScript 和 <canvas> 元素绘制多边形。作者首先展示了如何绘制六边形，然后通过修改角度和线条数量的方式，演示了如何绘制三角形、正方形和八边形等不同形状。接着，作者将这些代码封装成一个函数，使得用户可以通过传递中心点、半径和边数等参数来绘制不同的多边形。最后，作者提供了一些扩展思路，例如添加内半径、曲线和镶嵌等。文章还介绍了一些用于计算多边形顶点位置的数学和三角函数，以及一些基本的 < canvas > 绘图方法。读者可以在 MDN Web Docs Discord server 上与作者交流。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - cpojer/remdx：美丽的极简主义React & MDX演示文稿]]></title>
        <id>https://github.com/cpojer/remdx</id>
        <link href="https://github.com/cpojer/remdx"/>
        <updated>2023-06-06T05:36:34.492Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/cpojer/remdx">GitHub - cpojer/remdx: Beautiful Minimalist React & MDX Presentations</a></p><p><strong>概要：</strong></p><p>ReMDX 是一个基于 React 和 MDX 的漂亮的极简主义演示文稿创建工具。它提供了一些自定义设置和使用方法，可以通过添加组件来扩展功能。每个幻灯片都可以通过三条横线分隔开，并且可以在顶部插入前置块。它还支持自定义主题和背景图片，并使用 shiki-twoslash 进行代码块样式设置。ReMDX 受到 mdx-deck、Spectacle 和 Slidev 等工具的启发，但是它专注于快速、轻量级和可组合性。如果需要添加新的功能，可以 fork 并提交 PR。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端Rust开发WebAssembly与Swc插件快速入门_咲奈的博客-CSDN博客]]></title>
        <id>https://sakina.blog.csdn.net/article/details/131028238</id>
        <link href="https://sakina.blog.csdn.net/article/details/131028238"/>
        <updated>2023-06-05T10:05:40.846Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://sakina.blog.csdn.net/article/details/131028238">前端Rust开发WebAssembly与Swc插件快速入门_咲奈的博客-CSDN博客</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 Rust 进行前端开发，包括开发 wasm、swc 插件和代码处理工具。其中，开发 wasm 可以利用浏览器运行 wasm 的优势，在 wasm 中进行大量复杂的计算、音视频、图像处理等；开发 swc 插件可以替代 babel 插件实现代码转换；开发代码处理工具可以借助 Swc 来解析 JavaScript、TypeScript 代码，从而实现代码信息提取、转换、编译等。文章还介绍了如何初始化项目、构建产物和运行二进制包，并指出了各种方法的优缺点。最后，文章强调了不断精进 Rust，组织出更优雅的代码结构，实现更高的执行效率的重要性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bun中的JavaScript宏]]></title>
        <id>https://bun.sh/blog/bun-macros</id>
        <link href="https://bun.sh/blog/bun-macros"/>
        <updated>2023-06-02T04:35:34.091Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-macros">JavaScript Macros in Bun</a></p><p><strong>概要：</strong></p><p>Bun 发布了一个新功能 ——Bun Macros，它是一种在打包时运行 JavaScript 函数的机制，返回值直接嵌入到打包文件中。这个功能可以用于一些小的打包任务，也支持执行一些特权操作，比如读取数据库等。但如果需要大量运行代码，则应该考虑使用服务器。Bun Macros 是通过导入语句来实现的，需要使用 {type: 'macro'} 属性注解。该功能支持异步操作和 Promise，但输入参数必须是静态可分析的，并且返回值必须可序列化。此外，为了减少恶意软件攻击的可能性，它不能在 node_modules 目录中执行。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我认为Zig很难......但值得。]]></title>
        <id>http://ratfactor.com/zig/hard</id>
        <link href="http://ratfactor.com/zig/hard"/>
        <updated>2023-06-02T04:25:44.474Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="http://ratfactor.com/zig/hard">I think Zig is hard...but worth it</a></p><p><strong>概要：</strong></p><p>本文介绍了 Zig 编程语言的学习难度。虽然许多人认为 Zig 很容易学习，但对于像作者这样的程序员来说，它仍然是有挑战性的。文章列举了几个原因，包括 Zig 是一门新语言、Zig 强制你做出选择、Zig 是一门严谨的语言、Zig 具有 comptime 等特点。尽管 Zig 可能不容易掌握，但它力求简单、统一和正确，值得投资学习。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布 TypeScript 5.1 - TypeScript]]></title>
        <id>https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/</id>
        <link href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/"/>
        <updated>2023-06-02T04:23:18.447Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/">Announcing TypeScript 5.1 - TypeScript</a></p><p><strong>概要：</strong></p><p>TypeScript 5.1 已经发布，这个版本带来了一些新特性和优化。其中包括对 undefined-Returning 函数的隐式返回更容易、Getter 和 Setter 的无关类型、JSX 元素和 JSX 标记类型之间解耦的类型检查、命名空间 JSX 属性、typeRoots 在模块解析中的咨询、链接光标、@param JSDoc 标记的代码片段完成、避免不必要的类型实例化等。此外，TypeScript 5.1 还需要 ECMAScript 2020 和 Node.js 14.17 作为最小运行时要求。 TypeScript 团队正在努力开发 TypeScript 5.2，并计划在未来几个月内发布。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布Rust 1.70.0 | Rust博客]]></title>
        <id>https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html</id>
        <link href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html"/>
        <updated>2023-06-02T04:21:38.125Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html">Announcing Rust 1.70.0 | Rust Blog</a></p><p><strong>概要：</strong></p><p>Rust 1.70.0 版本已发布，该版本包括了一些新特性和 API 的稳定化。其中，Cargo 的 “sparse” 协议现在默认启用，这将大大提高从 crates.io 索引中获取信息的性能。此外，还稳定了两个新类型 OnceCell 和 OnceLock，用于共享数据的一次性初始化，以及新增了一个名为 IsTerminal 的特征，用于确定给定文件描述符或句柄是否表示终端或 TTY。同时，还稳定了许多 API，包括 Default for std::collections、Rc::into_inner、Arc::into_inner 等。此外，该版本还修复了一些 bug，完善了一些文档和测试。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v2.0.0-beta.0 - reduxjs/redux-toolkit]]></title>
        <id>https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0</id>
        <link href="https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0"/>
        <updated>2023-05-31T15:11:21.022Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0">Release v2.0.0-beta.0 · reduxjs/redux-toolkit</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Redux Toolkit 2.0 beta 版的更新内容，包括更新了许多 TS 类型以提高类型安全和行为，更新了 entityAdapter.getSelectors () 以接受一个 createSelector 选项，依赖于最新的 redux@5.0-beta.0 版本，并包括了 2.0 alpha 版之前的所有更改。此版本具有破坏性更改。文章还列出了一些新功能和破坏性更改的详细信息。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[现代HTML电子邮件（不再需要表格）。]]></title>
        <id>https://fullystacked.net/posts/modern-html-email/</id>
        <link href="https://fullystacked.net/posts/modern-html-email/"/>
        <updated>2023-05-31T04:23:22.582Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://fullystacked.net/posts/modern-html-email/">Modern HTML email (tables no longer required)</a></p><p><strong>概要：</strong></p><p>本文讨论了电子邮件开发中的问题，尤其是 Outlook 在 Windows 上的支持不足。传统的基于表格的布局已经成为过去式，现代的 HTML 和 CSS 标准开始被广泛采用。文章介绍了使用 div 元素、内联 CSS 和 AMP（加速移动页面）等技术来构建电子邮件的方法，并探讨了这些技术的优缺点。虽然电子邮件行业的进展缓慢，但它正在向着更一致和更现代的方向前进。</p>]]></content>
    </entry>
</feed>