<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-06-13T02:23:37.570Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[Bun v0.6.8]]></title>
        <id>https://bun.sh/blog/bun-v0.6.8</id>
        <link href="https://bun.sh/blog/bun-v0.6.8"/>
        <updated>2023-06-13T02:08:15.614Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-v0.6.8">Bun v0.6.8</a></p><p><strong>概要：</strong></p><p>Bun 发布了一系列更新，包括引入 JavaScript 打包器、提高性能、实现 node:vm 等功能。最新版本还加入了安全密码哈希 API、函数模拟和 toMatchObject 匹配器，以及实验性的检查员模式。此外，bun:sqlite 的.values () 方法现在返回 [] 而不是 null，同时发布了 bun-devtools 来简化开发人员的工作。该团队正在招聘 C/C++ 和 Zig 工程师，共同构建 JavaScript 的未来。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - evanw/polywasm]]></title>
        <id>https://github.com/evanw/polywasm</id>
        <link href="https://github.com/evanw/polywasm"/>
        <updated>2023-06-13T02:07:26.651Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/evanw/polywasm">GitHub - evanw/polywasm</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 polywasm 的 WebAssembly polyfill，它可以在 JavaScript 环境中运行缺少 WebAssembly 实现的.wasm 文件。这个库的存在是为了解决某些现代 JavaScript 环境禁用 WebAssembly 的问题，同时也可以用于调试和玩耍 WebAssembly 执行。该库的局限性包括没有完全验证 WebAssembly、不支持 NaN 位模式等。此外，文章还介绍了该库的性能和实现细节，包括数字表示和 AST 格式以及优化策略等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布v0.18.0 - evanw/esbuild]]></title>
        <id>https://github.com/evanw/esbuild/releases/tag/v0.18.0</id>
        <link href="https://github.com/evanw/esbuild/releases/tag/v0.18.0"/>
        <updated>2023-06-13T02:06:44.327Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/evanw/esbuild/releases/tag/v0.18.0">Release v0.18.0 · evanw/esbuild</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 esbuild 的新版本，主要是为了修复一些长期存在的问题，特别是与 tsconfig.json 文件的处理有关。该版本包含了向后不兼容的更改，建议在 package.json 文件中固定 esbuild 的确切版本或使用仅接受补丁升级的版本范围语法。更新内容包括：增加在线试用 esbuild 的方式、更改 TypeScript 装饰器的处理方式、支持 TypeScript 5.0 的多重继承、忽略 node_modules 中的 tsconfig.json 文件等。此外，还添加了针对 Safari 16.2 及更早版本的 bug 的解决方法，并修复了 CSS 嵌套转换的伪元素问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[骄傲的动画旗帜]]></title>
        <id>https://www.joshwcomeau.com/animation/pride-flags/</id>
        <link href="https://www.joshwcomeau.com/animation/pride-flags/"/>
        <updated>2023-06-07T02:28:32.902Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.joshwcomeau.com/animation/pride-flags/">Animated Pride Flags</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了如何使用 CSS 和 React 构建一个波浪的像素化彩虹旗。作者通过 CSS 关键帧动画、线性渐变等技巧来实现旗帜的波动效果，并且使用 CSS 变量和 JavaScript 函数来动态生成不同彩虹旗的颜色渐变。此外，作者还分享了一些额外的技巧，例如控制旗帜波动的程度、设置圆角、隐藏初始设置等。最后，作者呼吁人们支持跨性别群体，并推荐了一些 LGBTQIA + 慈善机构。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些博客迷思]]></title>
        <id>https://jvns.ca/blog/2023/06/05/some-blogging-myths/</id>
        <link href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/"/>
        <updated>2023-06-06T05:41:07.589Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/">Some blogging myths</a></p><p><strong>概要：</strong></p><p>本文主要讨论了一些阻止人们写博客的迷思，包括需要原创、需要专家水平、文章必须 100% 正确、写无聊的文章是不好的、需要解释每个概念、页面浏览量很重要以及更多材料总是更好等。作者认为这些迷思都是错误的，并提供了自己的看法和经验。例如，作者认为你只需要了解读者不知道的 1-2 件有趣的事情，而且不必担心预测什么会让人感兴趣。此外，作者还强调了个人故事的重要性，并分享了如何处理评论中的挑剔或恶意言论。最后，作者鼓励人们写博客，并表示他喜欢阅读关于计算机技术的个人故事。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何只用一个JavaScript函数就能画出任何规则的形状 | MDN博客]]></title>
        <id>https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/</id>
        <link href="https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/"/>
        <updated>2023-06-06T05:38:13.028Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://developer.mozilla.org/en-US/blog/javascript-shape-drawing-function/">How to draw any regular shape with just one JavaScript function | MDN Blog</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 JavaScript 和 <canvas> 元素绘制多边形。作者首先展示了如何绘制六边形，然后通过修改角度和线条数量的方式，演示了如何绘制三角形、正方形和八边形等不同形状。接着，作者将这些代码封装成一个函数，使得用户可以通过传递中心点、半径和边数等参数来绘制不同的多边形。最后，作者提供了一些扩展思路，例如添加内半径、曲线和镶嵌等。文章还介绍了一些用于计算多边形顶点位置的数学和三角函数，以及一些基本的 < canvas > 绘图方法。读者可以在 MDN Web Docs Discord server 上与作者交流。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - cpojer/remdx：美丽的极简主义React & MDX演示文稿]]></title>
        <id>https://github.com/cpojer/remdx</id>
        <link href="https://github.com/cpojer/remdx"/>
        <updated>2023-06-06T05:36:34.492Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/cpojer/remdx">GitHub - cpojer/remdx: Beautiful Minimalist React & MDX Presentations</a></p><p><strong>概要：</strong></p><p>ReMDX 是一个基于 React 和 MDX 的漂亮的极简主义演示文稿创建工具。它提供了一些自定义设置和使用方法，可以通过添加组件来扩展功能。每个幻灯片都可以通过三条横线分隔开，并且可以在顶部插入前置块。它还支持自定义主题和背景图片，并使用 shiki-twoslash 进行代码块样式设置。ReMDX 受到 mdx-deck、Spectacle 和 Slidev 等工具的启发，但是它专注于快速、轻量级和可组合性。如果需要添加新的功能，可以 fork 并提交 PR。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端Rust开发WebAssembly与Swc插件快速入门_咲奈的博客-CSDN博客]]></title>
        <id>https://sakina.blog.csdn.net/article/details/131028238</id>
        <link href="https://sakina.blog.csdn.net/article/details/131028238"/>
        <updated>2023-06-05T10:05:40.846Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://sakina.blog.csdn.net/article/details/131028238">前端Rust开发WebAssembly与Swc插件快速入门_咲奈的博客-CSDN博客</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 Rust 进行前端开发，包括开发 wasm、swc 插件和代码处理工具。其中，开发 wasm 可以利用浏览器运行 wasm 的优势，在 wasm 中进行大量复杂的计算、音视频、图像处理等；开发 swc 插件可以替代 babel 插件实现代码转换；开发代码处理工具可以借助 Swc 来解析 JavaScript、TypeScript 代码，从而实现代码信息提取、转换、编译等。文章还介绍了如何初始化项目、构建产物和运行二进制包，并指出了各种方法的优缺点。最后，文章强调了不断精进 Rust，组织出更优雅的代码结构，实现更高的执行效率的重要性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bun中的JavaScript宏]]></title>
        <id>https://bun.sh/blog/bun-macros</id>
        <link href="https://bun.sh/blog/bun-macros"/>
        <updated>2023-06-02T04:35:34.091Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-macros">JavaScript Macros in Bun</a></p><p><strong>概要：</strong></p><p>Bun 发布了一个新功能 ——Bun Macros，它是一种在打包时运行 JavaScript 函数的机制，返回值直接嵌入到打包文件中。这个功能可以用于一些小的打包任务，也支持执行一些特权操作，比如读取数据库等。但如果需要大量运行代码，则应该考虑使用服务器。Bun Macros 是通过导入语句来实现的，需要使用 {type: 'macro'} 属性注解。该功能支持异步操作和 Promise，但输入参数必须是静态可分析的，并且返回值必须可序列化。此外，为了减少恶意软件攻击的可能性，它不能在 node_modules 目录中执行。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我认为Zig很难......但值得。]]></title>
        <id>http://ratfactor.com/zig/hard</id>
        <link href="http://ratfactor.com/zig/hard"/>
        <updated>2023-06-02T04:25:44.474Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="http://ratfactor.com/zig/hard">I think Zig is hard...but worth it</a></p><p><strong>概要：</strong></p><p>本文介绍了 Zig 编程语言的学习难度。虽然许多人认为 Zig 很容易学习，但对于像作者这样的程序员来说，它仍然是有挑战性的。文章列举了几个原因，包括 Zig 是一门新语言、Zig 强制你做出选择、Zig 是一门严谨的语言、Zig 具有 comptime 等特点。尽管 Zig 可能不容易掌握，但它力求简单、统一和正确，值得投资学习。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布 TypeScript 5.1 - TypeScript]]></title>
        <id>https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/</id>
        <link href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/"/>
        <updated>2023-06-02T04:23:18.447Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1/">Announcing TypeScript 5.1 - TypeScript</a></p><p><strong>概要：</strong></p><p>TypeScript 5.1 已经发布，这个版本带来了一些新特性和优化。其中包括对 undefined-Returning 函数的隐式返回更容易、Getter 和 Setter 的无关类型、JSX 元素和 JSX 标记类型之间解耦的类型检查、命名空间 JSX 属性、typeRoots 在模块解析中的咨询、链接光标、@param JSDoc 标记的代码片段完成、避免不必要的类型实例化等。此外，TypeScript 5.1 还需要 ECMAScript 2020 和 Node.js 14.17 作为最小运行时要求。 TypeScript 团队正在努力开发 TypeScript 5.2，并计划在未来几个月内发布。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布Rust 1.70.0 | Rust博客]]></title>
        <id>https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html</id>
        <link href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html"/>
        <updated>2023-06-02T04:21:38.125Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html">Announcing Rust 1.70.0 | Rust Blog</a></p><p><strong>概要：</strong></p><p>Rust 1.70.0 版本已发布，该版本包括了一些新特性和 API 的稳定化。其中，Cargo 的 “sparse” 协议现在默认启用，这将大大提高从 crates.io 索引中获取信息的性能。此外，还稳定了两个新类型 OnceCell 和 OnceLock，用于共享数据的一次性初始化，以及新增了一个名为 IsTerminal 的特征，用于确定给定文件描述符或句柄是否表示终端或 TTY。同时，还稳定了许多 API，包括 Default for std::collections、Rc::into_inner、Arc::into_inner 等。此外，该版本还修复了一些 bug，完善了一些文档和测试。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发布 v2.0.0-beta.0 - reduxjs/redux-toolkit]]></title>
        <id>https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0</id>
        <link href="https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0"/>
        <updated>2023-05-31T15:11:21.022Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/reduxjs/redux-toolkit/releases/tag/v2.0.0-beta.0">Release v2.0.0-beta.0 · reduxjs/redux-toolkit</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Redux Toolkit 2.0 beta 版的更新内容，包括更新了许多 TS 类型以提高类型安全和行为，更新了 entityAdapter.getSelectors () 以接受一个 createSelector 选项，依赖于最新的 redux@5.0-beta.0 版本，并包括了 2.0 alpha 版之前的所有更改。此版本具有破坏性更改。文章还列出了一些新功能和破坏性更改的详细信息。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[现代HTML电子邮件（不再需要表格）。]]></title>
        <id>https://fullystacked.net/posts/modern-html-email/</id>
        <link href="https://fullystacked.net/posts/modern-html-email/"/>
        <updated>2023-05-31T04:23:22.582Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://fullystacked.net/posts/modern-html-email/">Modern HTML email (tables no longer required)</a></p><p><strong>概要：</strong></p><p>本文讨论了电子邮件开发中的问题，尤其是 Outlook 在 Windows 上的支持不足。传统的基于表格的布局已经成为过去式，现代的 HTML 和 CSS 标准开始被广泛采用。文章介绍了使用 div 元素、内联 CSS 和 AMP（加速移动页面）等技术来构建电子邮件的方法，并探讨了这些技术的优缺点。虽然电子邮件行业的进展缓慢，但它正在向着更一致和更现代的方向前进。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在30秒内用TypeScript为WebAssembly分享Rust类型]]></title>
        <id>https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds</id>
        <link href="https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds"/>
        <updated>2023-05-31T01:44:26.406Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds">Share Rust Types With TypeScript for WebAssembly in 30 Seconds</a></p><p><strong>概要：</strong></p><p>本文介绍了在 Rust 中生成 WebAssembly 模块的 TypeScript 类型定义的问题，并提供了一种解决方案。作者使用了 wasm-pack 和 wasm-bindgen 来编译 Rust 代码为 WebAssembly，但生成的 TypeScript 定义中有许多 “any” 类型，不够友好。为了解决这个问题，作者使用了 Tsify 库来自动生成 TypeScript 绑定，并对 Rust 代码进行了一些修改。最终生成的 TypeScript 定义更加清晰易懂。文章还介绍了 Voy，一个基于 WebAssembly 的语义搜索引擎，以及其他几个生成 TypeScript 定义的库。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于RustConf的主题演讲 | Rust博客]]></title>
        <id>https://blog.rust-lang.org/2023/05/29/RustConf.html</id>
        <link href="https://blog.rust-lang.org/2023/05/29/RustConf.html"/>
        <updated>2023-05-30T10:49:43.151Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.rust-lang.org/2023/05/29/RustConf.html">On the RustConf keynote | Rust Blog</a></p><p><strong>概要：</strong></p><p>2023 年 5 月 26 日，JeanHeyd Meneide 宣布他们不再在 RustConf 2023 上发言。他们被邀请在会议上发表主题演讲，但两周后被告知该演讲将被降级为普通演讲，原因是 Rust 项目领导层做出的决定。这个决定是错误的，我们首先要公开道歉造成的伤害。我们辜负了你，JeanHeyd。邀请后降低演讲的想法是侮辱性的，任何领导人都不应该愿意接受。领导层正在努力全面弄清楚发生了什么以及如何防止这种情况再次发生。然而，我们希望分享一些措施，以减少类似事件再次发生的风险。失败的主要原因是领导层聊天的决策和沟通过程。领导层聊天是在 2021 年底前的 Moderation Team 辞</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何做在创业小厂里做技术领导]]></title>
        <id>https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html</id>
        <link href="https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html"/>
        <updated>2023-05-29T12:53:59.400Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html">如何做在创业小厂里做技术领导</a></p><p><strong>概要：</strong></p><p>这篇文章主要讲述了在创业小厂中如何找到技术研发带头人以及如何管理技术团队。作者认为，技术领导的首要工作是提升团队的短板，可以通过工具、流程、规范等手段来实现。推荐使用 Git、自动化测试、代码静态分析、故障收集等工具来提升代码质量；同时，建议采用敏捷开发方法，包括每日立会、需求评审会、技术评审会等流程来保证团队稳定可靠高效地输出技术产品。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - vadimdemedes/pastel: 🎨类似Next.js的框架，用于用Ink制作的CLI。]]></title>
        <id>https://github.com/vadimdemedes/pastel</id>
        <link href="https://github.com/vadimdemedes/pastel"/>
        <updated>2023-05-29T12:50:43.689Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/vadimdemedes/pastel">GitHub - vadimdemedes/pastel: 🎨 Next.js-like framework for CLIs made with Ink</a></p><p><strong>概要：</strong></p><p>Pastel 是一个基于 Ink 开发的类似于 Next.js 的 CLI 框架。它允许用户在 commands 文件夹中创建文件来添加命令，支持定义选项和参数，并使用 Zod 实现完全类型安全。此外，Pastel 还自动生成命令、选项和参数的帮助信息，并在底层使用经过测试的 Commander 包。Pastel 可以通过 create-pastel-app 快速搭建一个带有 TypeScript、linter 和测试设置的应用程序，也可以手动设置新项目并安装 Pastel 和 TypeScript。 Pastel 支持索引命令、默认命令、子命令和别名，并支持字符串、数字、布尔、枚举、数组和集合等类型的选项和参数。Pastel 还允许用户自定义应用程序名称、描述和版本，并提供了一组 API 来初始化 Pastel 应用程序并运行它们。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React API的演变和代码重用]]></title>
        <id>https://frontendmastery.com/posts/the-evolution-of-react-patterns/</id>
        <link href="https://frontendmastery.com/posts/the-evolution-of-react-patterns/"/>
        <updated>2023-05-29T12:39:54.110Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://frontendmastery.com/posts/the-evolution-of-react-patterns/">The evolution of React APIs and code reuse</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 的演变历程和不同的代码重用模式，深入探讨了它们背后的思维模型和权衡。从最初的 Mixins 到 Higher-order components、Render props 和 Hooks，React 逐渐发展出更加简洁、灵活和易于理解的编程范式。作者指出，React 是一个提供低级原语的库，强调构建在稳定基础之上的架构和模式，以及应该优先考虑用户体验而非开发者体验。同时，随着 React 扩展到客户端和服务器端，我们需要更好地理解全栈 React 的边界和组合方式，以便更好地进行本地推理和代码管理。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我为什么离开拉斯特]]></title>
        <id>https://www.jntrnr.com/why-i-left-rust/</id>
        <link href="https://www.jntrnr.com/why-i-left-rust/"/>
        <updated>2023-05-29T12:36:21.559Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.jntrnr.com/why-i-left-rust/">Why I left Rust</a></p><p><strong>概要：</strong></p><p>文章主要讲述了作者为何离开 Rust 项目。起因是 JeanHeyd Meneide 被选为 RustConf 的主题演讲嘉宾，但由于他在博客中对 Rust 反射的看法引起了一些团队成员的不满，导致 Rust 领导层将其从主题演讲嘉宾降级为普通演讲嘉宾。作者认为这样的行为极度不尊重专家，并且暴露了 Rust 组织的冷酷和无情。此外，JeanHeyd 曾批评 Rust 缺乏黑人代表性，因此作者也认为这次事件背后可能还有更深层次的问题。最后，作者呼吁 Rust 组织要对这次事件负责并采取措施避免类似事件再次发生。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3种方法来找到你最糟糕的页面加载的JavaScript违规者]]></title>
        <id>https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load</id>
        <link href="https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load"/>
        <updated>2023-05-29T12:35:49.355Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load">3 ways to find your worst JavaScript offenders for page load</a></p><p><strong>概要：</strong></p><p>本文介绍了三种方法来评估 JavaScript 文件在页面加载中的影响。首先，使用 Lighthouse Treemap 根据字节大小排名 JavaScript 文件和模块，以便快速找出最大的依赖项。其次，使用 Chrome Dev Tools 性能选项卡根据脚本运行时间排名单个域的所有脚本。最后，使用 WebPageTest 根据阻塞时间排名脚本来源。作者建议使用这些方法来找到可以快速优化的低垂果实，然后再着手解决更复杂的问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在React Router v6测试中避免嘲弄？]]></title>
        <id>https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/</id>
        <link href="https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/"/>
        <updated>2023-05-29T12:35:28.875Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/">How to Avoid Mocking in React Router v6 Tests</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 React Router (v6) 测试应用程序，并提供了一个示例包装函数，以帮助您可靠地测试页面导航。这个包装函数建立在 React Testing Library（RTL）的 render () 函数之上，并抽象了一个数据路由器提供者，以便您可以在不模拟的情况下进行编程测试。文章还介绍了 renderWithRouter 函数的实现和测试用例，并提供了一个 codesandbox 示例。最后，作者提到了关于测试主题的后续计划，包括如何避免 mocking。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React应用中的状态管理]]></title>
        <id>https://reacthandbook.dev/state-management</id>
        <link href="https://reacthandbook.dev/state-management"/>
        <updated>2023-05-29T12:35:04.783Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://reacthandbook.dev/state-management">State Management in React Applications</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 应用程序中管理应用状态的一种非常灵活的方法。具体而言，这适用于 SPA（单页应用程序）构建架构。本指南的目标受众是 React 工程师和架构师，他们不是初学者，要么正在寻求构建新应用程序的指导，要么正在理解其他人为他们所工作的应用程序做出的决策。本文详细介绍了 5 种不同类型的 React 应用程序状态，并探讨了使用 React API、数据获取库和全局存储来管理这些状态的最佳实践。同时，本文还提到了一些常见的 React 生态系统中的库，如 Redux、Zustand、Jotai 等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你需要多少内存来运行100万个并发任务？]]></title>
        <id>https://pkolaczk.github.io/memory-consumption-of-async/</id>
        <link href="https://pkolaczk.github.io/memory-consumption-of-async/"/>
        <updated>2023-05-29T09:52:11.366Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pkolaczk.github.io/memory-consumption-of-async/">How Much Memory Do You Need to Run 1 Million Concurrent Tasks?</a></p><p><strong>概要：</strong></p><p>本文对比了异步和多线程编程在 Rust、Go、Java、C#、Python、Node.js 和 Elixir 等流行语言中的内存消耗。作者创建了一个基准程序，通过同时启动 N 个任务并等待它们完成来测试各种语言的内存消耗。结果显示，不同语言的运行时具有不同的权衡，有些轻量级且适用于少量任务，但随着任务数量的增加而扩展性差，而另一些初始开销高，可以轻松处理高工作负载。文章还指出，除了内存消耗之外，任务启动时间和通信速度等其他因素也同样重要。值得注意的是，在启动 100,000 个任务时，有些程序已经无法正常工作。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写总结比读更多的书更重要 - Andreas Fragner]]></title>
        <id>https://www.andreasfragner.com/writing/writing-summaries</id>
        <link href="https://www.andreasfragner.com/writing/writing-summaries"/>
        <updated>2023-05-29T09:51:33.514Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.andreasfragner.com/writing/writing-summaries">Writing summaries is more important than reading more books — Andreas Fragner</a></p><p><strong>概要：</strong></p><p>本文作者认为，阅读并非追求页数或速度，而是要注重理解和思考。为了提高理解能力，读者需要在阅读时自问问题，并尝试回答这些问题。作者建议使用一个简单的框架来写书摘，包括总结书籍主旨、中心问题和个人所学到的重要内容。此外，作者还介绍了两种选择好书的方法：主题阅读和检视阅读。最后，作者提出了另一种分享阅读体验的方式，即与他人讨论所读书籍的思想和观点。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - MineDojo/Voyager：一个具有大型语言模型的开放式体现型代理]]></title>
        <id>https://github.com/MineDojo/Voyager</id>
        <link href="https://github.com/MineDojo/Voyager"/>
        <updated>2023-05-27T06:55:10.187Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/MineDojo/Voyager">GitHub - MineDojo/Voyager: An Open-Ended Embodied Agent with Large Language Models</a></p><p><strong>概要：</strong></p><p>本文介绍了 Voyager，这是一个基于大型语言模型的具有开放式体验的生命学习代理，可以在 Minecraft 中持续探索世界、获得多样化技能并进行新颖的发现。Voyager 包括三个关键组成部分：1）自动课程设置，最大限度地促进探索；2）可执行代码的不断增长的技能库，用于存储和检索复杂行为；3）一种新的迭代提示机制，结合环境反馈、执行错误和自我验证以改进程序。Voyager 通过黑盒查询与 GPT-4 交互，避免了模型参数微调的需要。经验上，Voyager 表现出强大的场景下的生命学习能力，并展示了在玩 Minecraft 方面的卓越熟练度。它获得了比先前 SOTA 更多的独特物品（3.3 倍）、行程更长（2.3 倍），以及解锁关键技术树里程碑的速</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7.22.0版发布：明确的资源管理支持和导入属性解析 - Babel]]></title>
        <id>https://babeljs.io/blog/2023/05/26/7.22.0</id>
        <link href="https://babeljs.io/blog/2023/05/26/7.22.0"/>
        <updated>2023-05-27T04:50:50.460Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://babeljs.io/blog/2023/05/26/7.22.0">7.22.0 Released: Explicit Resource Management support and Import Attributes parsing · Babel</a></p><p><strong>概要：</strong></p><p>Babel 7.22.0 发布了，支持解析 / 转换明确资源管理提案的同步和异步变体，并支持导入属性的解析。此外，更新了装饰器的实现，添加了对 TypeScript 导入和导出语句的支持，以及将所有稳定 ECMAScript 功能的插件从 “-proposal-” 重命名为 “-transform-”。Babel 还提供 Open Collective 捐赠和直接与其合作实现新的 ECMAScript 提案的机会。更新还包括：明确资源管理、导入属性、装饰器更新和重命名软件包等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - vanjs-org/van: 🍦VanJS（Vanilla JavaScript）：世界上最小的反应式UI框架]]></title>
        <id>https://github.com/vanjs-org/van</id>
        <link href="https://github.com/vanjs-org/van"/>
        <updated>2023-05-26T04:14:24.030Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/vanjs-org/van">GitHub - vanjs-org/van: 🍦VanJS (Vanilla JavaScript): World's smallest reactive UI framework</a></p><p><strong>概要：</strong></p><p>VanJS 是一个超轻量级、零依赖和无偏见的反应式 UI 框架，基于纯粹的 vanilla JavaScript 和 DOM。它提供了声明性 DOM 树组合、可重用组件、响应式状态绑定等功能，类似于 React，但不需要 React、JSX、转换、虚拟 DOM 或任何隐藏逻辑。VanJS 非常容易学习，只有四个导出函数在 API 中，并且提供了 TypeScript 支持。它的打包大小仅为 1.2kB，比大多数流行的 UI 框架小 100 倍以上。VanJS 旨在通过降低 UI 编程的入门门槛来构建更好的世界，没有商业化的意图或计划。如果您发现 VanJS 有趣或将来可能对您有用，请考虑支持该项目。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023年如何免费托管你的副业项目：从Auth到数据库]]></title>
        <id>https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im</id>
        <link href="https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im"/>
        <updated>2023-05-26T04:13:50.663Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im">How to host your side-projects for free in 2023: from Auth to Database</a></p><p><strong>概要：</strong></p><p>本文介绍了如何在 2023 年免费托管你的项目。涵盖了身份验证、数据库、网站托管、后端托管、定时任务和键值存储等方面。Clerk 可用于处理用户身份验证，PlanetScale 提供 MySQL 数据库服务，Vercel 和 Netlify 可用于网站托管，Fly.io 适用于 Docker 镜像托管，Upstash 则提供定时任务和 Redis 缓存服务。这些服务可以帮助你免费托管你的项目，并且随着你的项目发展，它们也可以进行扩展。这些服务都是基于无服务器技术，因为无服务器技术可以根据需要自动缩放，从而使成本保持低廉。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.34: deno编译支持npm包]]></title>
        <id>https://deno.com/blog/v1.34</id>
        <link href="https://deno.com/blog/v1.34"/>
        <updated>2023-05-26T04:12:29.885Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://deno.com/blog/v1.34">Deno 1.34: deno compile supports npm packages</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Deno 1.34 的更新内容，包括支持 npm 包的 deno compile、在 deno.json 和 CLI 标志中支持 Glob、使用 IP 地址的 TLS 证书等。此外，还有许多改进和错误修复，如配置文件改进、语言服务器改进、Deno API 更改、npm 和 Node 兼容性改进、V8 11.5 和 TypeScript 5.0.4 等。最后，文章还提到了 Deno KV，这是一个全球分布式数据库，现已进入 beta 测试阶段。</p>]]></content>
    </entry>
</feed>