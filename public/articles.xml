<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-05-23T16:10:31.346Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[Bun v0.6.3]]></title>
        <id>https://bun.sh/blog/bun-v0.6.3</id>
        <link href="https://bun.sh/blog/bun-v0.6.3"/>
        <updated>2023-05-23T16:03:31.793Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-v0.6.3">Bun v0.6.3</a></p><p><strong>概要：</strong></p><p>Bun.js has released support for node:vm, improvements to node:tls and node:http, test.todo(), test timeouts, and better preloading. The release also includes fixes to Bun's bundler, such as a crash when merging adjacent top-level variable declarations, assets copying to an incorrect output path, and minifier bugs involving template literals being incorrectly merged. Additionally, two memory leaks found in fetch() have been fixed, and improvements have been made to console.log(). Changes to WebSocket include a breaking change to publishToSelf behaviour and buffer support in WebSocket messages. Other bug fixes include fs.writeFile({ flag: "a" }) now appending to files instead of overwriting it and N-API finalizers being called with the correct data pointer and finalizer hint.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用TypeScript的React组件库]]></title>
        <id>https://atlassc.net/2023/05/23/react-component-library-with-typescript</id>
        <link href="https://atlassc.net/2023/05/23/react-component-library-with-typescript"/>
        <updated>2023-05-23T11:06:54.357Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://atlassc.net/2023/05/23/react-component-library-with-typescript">React Component Library With TypeScript</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 TypeScript 创建 React 组件库的步骤。首先需要创建一个新目录并初始化 npm 包，然后安装必要的依赖项，包括 TypeScript、React 和 Rollup 等。接下来需要创建 tsconfig.json 和 rollup.config.js 文件，并在 src 目录中创建组件文件。最后可以使用 Rollup 进行打包并测试组件库。通过这些步骤，可以轻松地创建自己的基于 TypeScript 的 React 组件库。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿童木2.5 | 阿童木]]></title>
        <id>https://astro.build/blog/astro-250/</id>
        <link href="https://astro.build/blog/astro-250/"/>
        <updated>2023-05-23T11:06:18.103Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://astro.build/blog/astro-250/">Astro 2.5 | Astro</a></p><p><strong>概要：</strong></p><p>Astro 2.5 发布了，其中包括数据集合和引用、混合渲染、自定义客户端指令、HTML 压缩、并行渲染和多态类型助手等功能。数据集合和引用允许用户在 src/content/ 文件夹中存储 JSON 和 YAML 文件，并从其他集合中引用这些数据；混合渲染允许在大多数静态站点中使用服务器路由；自定义客户端指令允许集成作者定义自己的客户端加载机制；HTML 压缩可以选择压缩 Astro 模板；并行渲染可以加速同时进行数据加载的多个组件的渲染；多态类型助手可以定义接受与内置元素相同道具的组件。此外，该版本还包括其他 bug 修复和改进。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更快的Sandpack Transpiler之旅]]></title>
        <id>https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler</id>
        <link href="https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler"/>
        <updated>2023-05-23T11:05:04.827Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler">The Journey To a Faster Sandpack Transpiler</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Sandpack 团队为了解决性能问题而进行的优化和重构工作。他们一开始使用 babel 和 meriyah 进行转译，但是由于需要在客户端上转译更多的代码，他们寻找了一个更快的转译器，最终选择了 Sucrase。然而，Sucrase 在处理大文件时存在问题，因此他们对其进行了优化和重写，使其比 esbuild 更快。接下来，他们决定使用 Rust 语言重写 Sucrase，以获得更好的内存管理和更高的性能。他们首先重写了解析器，使用 Ropey 库和字符向量来提高性能，然后重写了转换器，使用状态字符迭代器和字符串引用来减少拷贝和提高性能。最终，经过测试，新的 Sucrase 比之前的版本快两倍以上，并且还有更多的优化空间。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Bun.js作为捆绑器]]></title>
        <id>https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/</id>
        <link href="https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/"/>
        <updated>2023-05-23T11:04:24.777Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/">Using Bun.js as a bundler</a></p><p><strong>概要：</strong></p><p>Bun.js 是一个新的 JavaScript 运行时，旨在实现极速。作者 Jarred Sumner 在 Twitter 上宣布他们已经发布了一个新的代码捆绑器的 beta 版本，展示了与其他捆绑器相比的惊人速度提升。该文章介绍了作者如何使用 Bun.js 来加速他的构建系统，并讨论了他在使用过程中遇到的问题和解决方案。尽管 Bun.js 还处于开发阶段，但其速度和功能使其成为一个非常有用的工具。最后，作者推广了他的一个 iPad / 平板应用程序 KidzFun.art，这是一个适合孩子们画图、做数学题、制作 GIF 等的 PWA 应用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我正在建立一个公司]]></title>
        <id>https://cpojer.net/posts/building-a-company</id>
        <link href="https://cpojer.net/posts/building-a-company"/>
        <updated>2023-05-23T11:00:18.900Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://cpojer.net/posts/building-a-company">I'm Building a Company</a></p><p><strong>概要：</strong></p><p>文章介绍了作者创立的新游戏公司 Nakazawa Tech，以及他们正在制作的第一款游戏 Athena Crisis。作者提到自己希望通过建立这个公司来实现新的个人目标和原则，例如：构建他所希望存在的事物、关注真正重要的事情、创造难忘的体验和艺术等。同时，作者还强调了开源对于公司的重要性，并分享了他们最近发布的一些小型库。最后，作者邀请读者注册早期访问 Athena Crisis，并表示公司正在寻找故事设计师、社区经理和后端托管合作伙伴。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Sprite-Diffuser修改《帝国时代II》的内容]]></title>
        <id>https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/</id>
        <link href="https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/"/>
        <updated>2023-05-22T08:31:07.811Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/">Modding Age of Empires II with a Sprite-Diffuser</a></p><p><strong>概要：</strong></p><p>本文介绍了作者如何利用 Stable Diffusion Web UI 和 Python 创建一个多功能的基于提示的图像生成器，以制作自定义文明精灵。作者在 Photoshop 中使用 Alpaca 开始实验，并尝试在不同风格下生成 Age of Empires II 游戏截图，探索模型的行为和选择保留和丢弃的形状和纹理。作者还使用 Control Net 和 Loopbacks 等技术来优化输出结果，并提出了一些其他的实验和思考。最终，作者认为这种模型非常灵活，未来的游戏可以利用它来种植用户生成的故事或内部开发。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - imartinez/privateGPT: 利用GPT的力量私下与你的文件互动，100%私下进行，没有数据泄露。]]></title>
        <id>https://github.com/imartinez/privateGPT</id>
        <link href="https://github.com/imartinez/privateGPT"/>
        <updated>2023-05-22T05:48:32.440Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/imartinez/privateGPT">GitHub - imartinez/privateGPT: Interact privately with your documents using the power of GPT, 100% privately, no data leaks</a></p><p><strong>概要：</strong></p><p>本文介绍了一种使用 LLMs 进行离线问答的方法，完全私密，不需要互联网连接。用户可以将文件导入并提出问题，而无需互联网连接。该方法使用 LangChain、GPT4All、LlamaCpp、Chroma 和 SentenceTransformers 构建。用户需要设置环境并下载 LLM 模型，然后将数据集放入指定目录中，支持多种格式的文件。用户可以使用命令行工具提出问题，并且可以使用命令行参数修改脚本的行为。该方法使用本地模型和 LangChain 的强大功能，在不泄露任何数据的情况下运行整个流程，并具有合理的性能。但是，该方法仅用于测试，不适用于生产环境，选择的模型也不是针对性能优化的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一个站点]]></title>
        <id>https://www.engineersneedart.com/blog/samestop/samestop.html</id>
        <link href="https://www.engineersneedart.com/blog/samestop/samestop.html"/>
        <updated>2023-05-22T05:46:55.519Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.engineersneedart.com/blog/samestop/samestop.html">Same Stop</a></p><p><strong>概要：</strong></p><p>这篇文章讲述了一位前苹果程序员退休后又重新开始编程的经历。虽然最初他感到解脱，但不久之后又开始尝试用 Python 和 Javascript 写小项目。现在他突然重返编程世界，重新沉迷于 C 语言和游戏开发。他回顾了自己从事编程的经历，并思考了编程对于工程师们来说是一份工作还是一种爱好。他认为，早期的程序员都是出于热情而从事编程的，但现在的工程师们可能更多地将其视为一份工作。最后，他对自己重返编程世界的经历感到惊讶和欣喜，同时也提醒自己要注意保持平衡。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - pengxiao-song/LaWGPT: 🎉 Repo for LaWGPT, Chinese-Llama tuned with Chinese Legal knowledge. 基于中文法律知识的大语言模型]]></title>
        <id>https://github.com/pengxiao-song/LaWGPT</id>
        <link href="https://github.com/pengxiao-song/LaWGPT"/>
        <updated>2023-05-22T03:03:46.056Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/pengxiao-song/LaWGPT">GitHub - pengxiao-song/LaWGPT: 🎉 Repo for LaWGPT, Chinese-Llama tuned with Chinese Legal knowledge. 基于中文法律知识的大语言模型</a></p><p><strong>概要：</strong></p><p>LaWGPT 是一系列基于中文法律知识的开源大语言模型，通过扩充法律领域专有词表和大规模中文法律语料预训练，增强了大模型在法律领域的基础语义理解能力。在此基础上，构造法律领域对话问答数据集、中国司法考试数据集进行指令精调，提升了模型对法律内容的理解和执行能力。该项目持续开展，法律领域数据集及系列模型后续相继开源。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[健康学习到150岁 - 人体系统调优不完全指南]]></title>
        <id>https://github.com/zijie0/HumanSystemOptimization</id>
        <link href="https://github.com/zijie0/HumanSystemOptimization"/>
        <updated>2023-05-22T02:14:38.416Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/zijie0/HumanSystemOptimization">健康学习到150岁 - 人体系统调优不完全指南</a></p><p><strong>概要：</strong></p><p>本文介绍了神经科学教授 Andrew Huberman 的一些关于提升日常工作、学习表现的方法和工具。其中睡眠是最重要的前提，生物钟对睡眠的控制机理是光照和体温。因此，控制接收光照的时间点、类型和时长以及保持适当的体温可以提升睡眠质量。其他实践包括锻炼、饮食、呼吸和注意力训练等方面。这些方法都基于高质量、peer reviewed 的科学研究成果，可以像调优软件程序那样来 “调优” 我们自身的人体系统。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React服务器组件、Next.js应用程序路由器和实例]]></title>
        <id>https://addyosmani.com/blog/react-server-components-app-router/</id>
        <link href="https://addyosmani.com/blog/react-server-components-app-router/"/>
        <updated>2023-05-22T01:58:11.076Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://addyosmani.com/blog/react-server-components-app-router/">React Server Components, Next.js App Router and examples</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 社区最近关于 Server Components、Next.js App Router 和工具与渲染方法未来的讨论，以及对这些概念的简要总结。文章解释了什么是 React Server Components，它们与 Next.js App Router 的关系，以及为什么选择生产框架（如 Next.js 或 Remix）而不是 Create React App。文章还提到了 RSC 实现的可用性和 “混合” 渲染的趋势，即将构建时间、服务器和客户端渲染相结合，创造更灵活的 Web 开发方法。最后，文章推荐了一些 RSC + Next App Router 的示例。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[把Python当作Rust来写]]></title>
        <id>https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html</id>
        <link href="https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html"/>
        <updated>2023-05-22T01:57:30.687Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html">Writing Python like it's Rust</a></p><p><strong>概要：</strong></p><p>本文介绍了作者在使用 Rust 后如何将其中的一些概念应用到 Python 编程中，以提高程序的严谨性和可读性。具体来说，作者建议在函数签名和类属性中尽可能使用类型提示，使用 dataclass 代替元组或字典，使用 union type 模拟 Rust 中的 algebraic data types，使用 newtype 提高代码的可读性，使用构造函数代替 __init__ 方法，并使用类型系统来编码不变量。通过这些方法，作者认为可以减少代码中的错误和 bug，提高代码的可维护性和可扩展性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[来自其他语言和框架的模式来增强你的前端项目]]></title>
        <id>https://hackernoon.com/patterns-from-other-languages-and-frameworks-to-enhance-your-frontend-projects</id>
        <link href="https://hackernoon.com/patterns-from-other-languages-and-frameworks-to-enhance-your-frontend-projects"/>
        <updated>2023-05-22T01:55:36.453Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://hackernoon.com/patterns-from-other-languages-and-frameworks-to-enhance-your-frontend-projects">Patterns from Other Languages and Frameworks to Enhance Your Frontend Projects</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了作者在编程过程中学到的一些规则、工具和模式，以及如何将它们应用到前端项目中。作者分享了他对这些规则的理解和使用方法，并提供了一些实用的技巧和建议。通过这篇文章，读者可以学习到如何提高前端项目的质量和效率。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[了解React并发性]]></title>
        <id>https://www.bbss.dev/posts/react-concurrency/</id>
        <link href="https://www.bbss.dev/posts/react-concurrency/"/>
        <updated>2023-05-22T01:52:46.884Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.bbss.dev/posts/react-concurrency/">Understanding React Concurrency</a></p><p><strong>概要：</strong></p><p>React v18.0 引入了一项期待已久的功能：并发模式！尽管有大量资源解释如何使用它，但对其工作原理的解释很少。基本上，React 并发模式是重新设计渲染过程，使得在渲染下一个视图时，当前视图保持响应性。由于这是一项低级特性，理解 React 的并发模式的想法并不关键，但也无妨。React 团队最初计划通过并发模式来提高应用程序性能，但由于向后兼容性原因，该计划未能实现，转而推出了一组新 API，即并发特性，以选择性地启用并发渲染。目前，React 已经引入了两个新钩子来选择并发渲染：useTransition 和 useDeferredValue。这篇文章介绍了这两个钩子的用法和注意事项，并提到了它们在 Suspense 组件中的作用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工人浏览器渲染API进入公开测试阶段]]></title>
        <id>https://blog.cloudflare.com/browser-rendering-open-beta/</id>
        <link href="https://blog.cloudflare.com/browser-rendering-open-beta/"/>
        <updated>2023-05-22T01:44:09.461Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.cloudflare.com/browser-rendering-open-beta/">Workers Browser Rendering API enters open beta</a></p><p><strong>概要：</strong></p><p>Cloudflare 宣布开放其 Workers Browser Rendering API 的公测，该 API 允许开发者编程控制和交互无头浏览器实例，并为应用程序和产品创建自动化流程。通过 Wrangler 命令行工具配置、构建和部署应用程序，开发者可以使用 Browser Rendering API 绑定与 Cloudflare 开发平台上的资源进行交互。此外，Cloudflare 还推出了 Puppeteer，这是一个流行的库，它抽象了低级别的 DevTools 协议，提供了高级 API，使开发者能够轻松地操纵 Chrome/Chromium 并自动化浏览会话。在未来，Cloudflare 将更新 Puppeteer 以匹配其基础设施中运行的 Chromium 实例版本。该公司表示，他们已经广泛使用 Browser Rendering API 进行屏幕截图、测试 Web 应用程序等任务，而且还计划将其用于 URL 扫描器等项目。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你可能不需要React Query]]></title>
        <id>https://tkdodo.eu/blog/you-might-not-need-react-query</id>
        <link href="https://tkdodo.eu/blog/you-might-not-need-react-query"/>
        <updated>2023-05-21T07:32:00.451Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://tkdodo.eu/blog/you-might-not-need-react-query">You Might Not Need React Query</a></p><p><strong>概要：</strong></p><p>这篇文章讨论了 React Server Components 是否会取代 React Query。作者认为，每个工具都应该帮助我们解决我们遇到的问题。传统上，React 在数据获取方面并不强调如何处理，这就是 React Query 和 swr 等库产生的原因。随着服务端渲染的出现，React Query 也扮演了重要的角色。但是，随着 React Server Components 的出现，如果您的数据获取仅发生在服务器上，那么您可能不需要 React Query。作者认为，在新的 Server Components 世界中，React Query 仍然可以很好地与应用程序集成。最后，作者提醒读者，不要盲目追随新技术，一切都有权衡。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt 3.5 - Nuxt]]></title>
        <id>https://nuxt.com/blog/v3-5</id>
        <link href="https://nuxt.com/blog/v3-5"/>
        <updated>2023-05-19T01:04:44.665Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://nuxt.com/blog/v3-5">Nuxt 3.5 · Nuxt</a></p><p><strong>概要：</strong></p><p>Nuxt 3.5.0 发布了，带来了许多令人兴奋的功能，特别是在类型支持方面。此外还有 Nitropack v2.4 和丰富的 JSON 负载等更新。Nuxt 3.5.0 还支持交互式服务器组件、环境配置、完全类型化页面和 “捆绑器” 模块解析等功能。除此之外，该版本还修复了一些错误和问题。建议升级到最新版本，并阅读完整的发行说明和变更日志。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[宣布 TypeScript 5.1 RC - TypeScript]]></title>
        <id>https://devblogs.microsoft.com/typescript/announcing-typescript-5-1-rc/</id>
        <link href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1-rc/"/>
        <updated>2023-05-19T00:31:59.629Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-1-rc/">Announcing TypeScript 5.1 RC - TypeScript</a></p><p><strong>概要：</strong></p><p>TypeScript 5.1 has been released as a Release Candidate, with no further changes expected before the stable release apart from critical bug fixes. The new version includes easier implicit returns for undefined-returning functions, unrelated types for getters and setters, decoupled type-checking between JSX elements and JSX tag types, namespaced JSX attributes, and more. TypeScript 5.1 also supports linked cursors for JSX tags, snippet completions for @param JSDoc tags, and optimizations such as avoiding unnecessary type instantiation and negative case checks for union literals. However, there are also breaking changes, such as ES2020 and Node.js 14.17 being minimum runtime requirements, and explicit typeRoots disabling upward walks for node_modules/@types. The TypeScript team is already working on TypeScript 5.2, with a public iteration plan available.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在科技会议上从参会者到演讲者的9个技巧 | GitHub博客]]></title>
        <id>https://github.blog/2023-05-18-9-tips-to-go-from-attendee-to-speaker-at-a-tech-conference/</id>
        <link href="https://github.blog/2023-05-18-9-tips-to-go-from-attendee-to-speaker-at-a-tech-conference/"/>
        <updated>2023-05-19T00:30:35.220Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.blog/2023-05-18-9-tips-to-go-from-attendee-to-speaker-at-a-tech-conference/">9 tips to go from attendee to speaker at a tech conference | The GitHub Blog</a></p><p><strong>概要：</strong></p><p>GitHub Universe 是一年一度的全球开发者和客户活动，今年将于 11 月 8 日至 9 日在线上和线下举行。文章提供了一些撰写成功演讲提案的技巧，例如标题要吸引人、具体说明内容的收获、突出会议性质等。此外，还提供了演讲者个人介绍的公式和其他有用资源，如往年活动的回顾、联系前任演讲者、关注行业热点等。最后，文章呼吁有兴趣参加演讲的人提交他们的想法，并列出了被选中的好处。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - DukeLuo/eslint-plugin-check-file：ESLint规则的一致的文件名和文件夹。允许你为文件名和文件夹强制执行一致的命名模式。]]></title>
        <id>https://github.com/DukeLuo/eslint-plugin-check-file</id>
        <link href="https://github.com/DukeLuo/eslint-plugin-check-file"/>
        <updated>2023-05-19T00:27:28.162Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/DukeLuo/eslint-plugin-check-file">GitHub - DukeLuo/eslint-plugin-check-file: ESLint rules for consistent filename and folder. Allows you to enforce a consistent naming pattern for the filename and folder.</a></p><p><strong>概要：</strong></p><p>本文介绍了一个名为 eslint-plugin-check-file 的 ESLint 插件，该插件可以帮助开发者强制规范化文件和文件夹的命名方式。插件支持多种规则，例如强制指定文件夹名称、文件名命名规范等。开发者只需要在.eslintrc 配置文件中添加相应的规则即可使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么我们选择Astro而不是Nuxt]]></title>
        <id>https://www.blackspike.com/blog/why-we-chose-astro-over-nuxt/</id>
        <link href="https://www.blackspike.com/blog/why-we-chose-astro-over-nuxt/"/>
        <updated>2023-05-19T00:26:56.550Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.blackspike.com/blog/why-we-chose-astro-over-nuxt/">Why we chose Astro over Nuxt</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了一个网站建设过程中的问题：由于使用了 Three.js 等大量 JavaScript 库，导致页面加载缓慢和卡顿。为了解决这个问题，作者尝试了 Astro 框架，它可以将 JavaScript 编译成 HTML 和 CSS，从而减少页面的 JavaScript 代码量。作者发现，对于博客和静态营销网站等项目，Astro 是一个很好的选择。但对于有交互部分的网站，如头条 Shopify 网站或单页应用程序，则更适合使用 Nuxt 框架。文章最后总结了两种框架的优缺点。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[揭开魔法的面纱：探索各种框架的反应性]]></title>
        <id>https://www.builder.io/blog/reactivity-across-frameworks</id>
        <link href="https://www.builder.io/blog/reactivity-across-frameworks"/>
        <updated>2023-05-19T00:26:15.754Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.builder.io/blog/reactivity-across-frameworks">Unveiling the Magic: Exploring Reactivity Across Various Frameworks</a></p><p><strong>概要：</strong></p><p>本文深入探讨了各种前端框架中的响应性（reactivity）机制，着重比较了粗粒度和细粒度响应性之间的差异。React 和 Angular 属于粗粒度系统，需要重新执行组件树来检测更改并更新 DOM；Svelte、Vue、Qwik 和 Solid 属于细粒度系统，可以更加高效地检测和更新 DOM。Qwik 是唯一一个不需要预热的框架，它通过 SSR/SSG 将状态与 DOM 相关联，并在客户端恢复这些信息，从而避免了下载大量应用代码的问题。作者认为，虽然粗粒度系统 “随便用” 会更方便，但是使用细粒度系统可能会更高效，因为后者已经进行了优化。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[介绍一下Legend-State 1.0：更快地构建更快的应用程序]]></title>
        <id>https://legendapp.com/open-source/legend-state-v1/</id>
        <link href="https://legendapp.com/open-source/legend-state-v1/"/>
        <updated>2023-05-19T00:25:43.116Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://legendapp.com/open-source/legend-state-v1/">Introducing Legend-State 1.0: Build faster apps faster</a></p><p><strong>概要：</strong></p><p>文章介绍了一个名为 Legend-State 的 React 状态库，它具有极快的速度、易用性、自然的细粒度反应和内置持久性等四个主要优点。该库基于可观察对象实现，使用 Proxy 跟踪对象中的路径，从而在速度和内存使用方面超越其他 React 状态库。使用该库不需要繁琐的模板代码和上下文、动作、规约、分派器等，只需调用 get () 获取原始数据并使用 set () 更改数据即可。此外，该库还支持细粒度反应，使得组件能够在特定值更改时更新，从而减少重新渲染的次数。最后，该库还内置了持久化功能，可以保存和同步应用程序状态。未来，该库将添加更多的持久化插件和辅助可观察对象和钩子函数。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[管理GitHub通知 - GitHub维护者峰会2023]]></title>
        <id>https://antfu.me/posts/manage-github-notifcations-2023</id>
        <link href="https://antfu.me/posts/manage-github-notifcations-2023"/>
        <updated>2023-05-17T15:43:54.393Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://antfu.me/posts/manage-github-notifcations-2023">Manage GitHub Notifications - GitHub Maintainer Summit 2023</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了一种名为 “Notification-driven Developement” 的方法来管理 GitHub 上的项目。该作者通过使用 GitHub 的通知系统来管理他所维护的各种规模的项目，以保持项目的活跃度和稳定性。他提出了 “Inbox-Zero” 概念，即每天处理完所有收到的通知，以便快速响应社区成员并控制维护工作量。文章还分享了一些减少通知数量和组织通知的技巧，并介绍了一个用户脚本来自动化通知处理。最后，作者强调了享受工作和保持良好的工作与生活平衡的重要性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[馒头捆绑器]]></title>
        <id>https://bun.sh/blog/bun-bundler</id>
        <link href="https://bun.sh/blog/bun-bundler"/>
        <updated>2023-05-17T04:41:23.198Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-bundler">The Bun Bundler</a></p><p><strong>概要：</strong></p><p>Bun bundler 是一个快速的本地打包工具，现在已经进入了 beta 测试阶段。它可以通过 bun build CLI 命令或新的 Bun.build () JavaScript API 来使用。该工具可以用于构建前端应用程序，并提供了内置的 Bun.build () 函数和 bun build CLI 命令。文章指出，JavaScript 生态系统的复杂性不断增加，如何运行 TypeScript 文件、如何为生产环境构建 / 打包代码等问题使得开发变得越来越复杂。Bun bundler 的目标是将打包引入 JavaScript 运行时，从而使前端和全栈代码的发布更简单、更快速。该工具的优点包括：插件执行快速、生成预转换文件以提高运行性能、统一的插件 API、构建输出数组、支持 ESM 模块系统、支持 tree-shaking、支持源码映射、支持 JS 压缩器等。未来，Bun bundler 还将与 Bun 的 HTTP 服务器 API（Bun.serve）集成，从而实现用简单的声明式 API 代替</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[充满惊喜的JavaScript生态圈]]></title>
        <id>https://fly.io/blog/js-ecosystem-delightfully-wierd/</id>
        <link href="https://fly.io/blog/js-ecosystem-delightfully-wierd/"/>
        <updated>2023-05-16T01:46:08.086Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://fly.io/blog/js-ecosystem-delightfully-wierd/">The JavaScript Ecosystem is Delightfully Weird</a></p><p><strong>概要：</strong></p><p>这篇文章讲述了 JavaScript 生态系统的奇怪之处。作者认为，JavaScript 在不到 10 年前非常糟糕，缺乏许多现代语言特性，而且主要运行在浏览器的 DOM 中，很难处理。然而，随着时间的推移，JavaScript 的发展迅速改善，出现了许多编译器和转换工具，如 CoffeeScript、Babel 和 esbuild，使得开发人员可以使用更加现代化的语言特性来编写 JavaScript 代码。同时，JavaScript 生态系统也变得越来越庞大，涵盖了许多框架和库，但是这些框架和库并没有完全遵循 ECMAScript 标准，而是进行了一些自己的扩展和修改，例如 TypeScript 和 JSX。最近，React Server Components (RSC) 出现了，它通过与打包工具的合作，实现了将 React 组件编译成 HTML 或 JSON 流的功能，从而引发了人们对于 JavaScript 语言本身的重新思考。总</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Qt和Rust构建一个桌面应用程序 - LogRocket博客]]></title>
        <id>https://blog.logrocket.com/build-desktop-app-qt-rust/</id>
        <link href="https://blog.logrocket.com/build-desktop-app-qt-rust/"/>
        <updated>2023-05-15T07:17:16.737Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.logrocket.com/build-desktop-app-qt-rust/">Build a desktop app with Qt and Rust - LogRocket Blog</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 Rust 和 Qt 框架构建桌面应用程序。作者首先讨论了桌面应用程序的优点，然后介绍了 Rust 在桌面应用程序开发中的流行程度和可靠性。接着，作者演示了如何使用 Qt 和 Rust 构建一个简单的 “Hello World” 应用程序，并逐步添加了加密和解密功能。最后，作者还介绍了如何使用 GitHub CI 工作流程来确保代码正确性。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[将Next.js App Router用于生产的5条经验之谈]]></title>
        <id>https://www.inngest.com/blog/5-lessons-learned-from-taking-next-js-app-router-to-production</id>
        <link href="https://www.inngest.com/blog/5-lessons-learned-from-taking-next-js-app-router-to-production"/>
        <updated>2023-05-15T04:52:42.154Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.inngest.com/blog/5-lessons-learned-from-taking-next-js-app-router-to-production">5 Lessons Learned From Taking Next.js App Router to Production</a></p><p><strong>概要：</strong></p><p>Next.js 13 的新功能 App Router 引入了 Nested Layouts、Server Components 和 Streaming 等多项新特性，是第一个开源实现 React 18 原语的工具。从 Next.js 13.4 开始，App Router 已被认为是生产就绪状态。使用 App Router 可以更轻松地在路由之间共享 UI、更好地利用服务器组件、更快地展示页面部分内容以及准备未来。但是，在应用 App Router 时需要注意两个缓存、URL 搜索参数在布局服务器组件中的问题、文件结构的优点以及学习新技术和资源有限的挑战。建议先仔细阅读官方文档，如果遇到问题可以查看 GitHub 和 Twitter 上的讨论，并且分享经验和解决方案有助于建立更加实质性的知识库。总体而言，采用 App Router 可以提高用户和开发者的体验，但需要耐心和深入挖掘。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解useRef和useState用于跟踪React中的组件渲染次数]]></title>
        <id>https://peterkellner.net//2023/05/05/Understanding-useRef-and-useState-for-Tracking-Component-Render-Count-in-React/</id>
        <link href="https://peterkellner.net//2023/05/05/Understanding-useRef-and-useState-for-Tracking-Component-Render-Count-in-React/"/>
        <updated>2023-05-15T04:52:16.782Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://peterkellner.net//2023/05/05/Understanding-useRef-and-useState-for-Tracking-Component-Render-Count-in-React/">Understanding useRef and useState for Tracking Component Render Count in React</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 中使用 useRef 和 useState 来追踪组件渲染次数的实际例子。通过自定义一个名为 useComponentRenderCount 的 hook，使用 useRef 来存储渲染次数，并使用 useState 来管理组件内的不同状态值。通过将状态值分开控制，可以提高代码可读性并更轻松地管理每个值的状态更新。理解何时使用 useRef 以及如何与 useState 一起使用对于管理复杂的组件行为至关重要。在开发 React 应用程序时，需要平衡性能和功能，才能创建高质量的应用程序。</p>]]></content>
    </entry>
</feed>