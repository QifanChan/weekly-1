<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>articles@mdhweekly.com</id>
    <title>MDH Weekly · 深度好文</title>
    <updated>2023-05-31T01:45:48.669Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mdhweekly.com"/>
    <subtitle>深度好文 from MDH Weekly</subtitle>
    <rights>sorrycc@gmail.com</rights>
    <entry>
        <title type="html"><![CDATA[在30秒内用TypeScript为WebAssembly分享Rust类型]]></title>
        <id>https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds</id>
        <link href="https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds"/>
        <updated>2023-05-31T01:44:26.406Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dawchihliou.github.io/articles/share-rust-types-with-typescript-for-webassembly-in-30-seconds">Share Rust Types With TypeScript for WebAssembly in 30 Seconds</a></p><p><strong>概要：</strong></p><p>本文介绍了在 Rust 中生成 WebAssembly 模块的 TypeScript 类型定义的问题，并提供了一种解决方案。作者使用了 wasm-pack 和 wasm-bindgen 来编译 Rust 代码为 WebAssembly，但生成的 TypeScript 定义中有许多 “any” 类型，不够友好。为了解决这个问题，作者使用了 Tsify 库来自动生成 TypeScript 绑定，并对 Rust 代码进行了一些修改。最终生成的 TypeScript 定义更加清晰易懂。文章还介绍了 Voy，一个基于 WebAssembly 的语义搜索引擎，以及其他几个生成 TypeScript 定义的库。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于RustConf的主题演讲 | Rust博客]]></title>
        <id>https://blog.rust-lang.org/2023/05/29/RustConf.html</id>
        <link href="https://blog.rust-lang.org/2023/05/29/RustConf.html"/>
        <updated>2023-05-30T10:49:43.151Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.rust-lang.org/2023/05/29/RustConf.html">On the RustConf keynote | Rust Blog</a></p><p><strong>概要：</strong></p><p>2023 年 5 月 26 日，JeanHeyd Meneide 宣布他们不再在 RustConf 2023 上发言。他们被邀请在会议上发表主题演讲，但两周后被告知该演讲将被降级为普通演讲，原因是 Rust 项目领导层做出的决定。这个决定是错误的，我们首先要公开道歉造成的伤害。我们辜负了你，JeanHeyd。邀请后降低演讲的想法是侮辱性的，任何领导人都不应该愿意接受。领导层正在努力全面弄清楚发生了什么以及如何防止这种情况再次发生。然而，我们希望分享一些措施，以减少类似事件再次发生的风险。失败的主要原因是领导层聊天的决策和沟通过程。领导层聊天是在 2021 年底前的 Moderation Team 辞</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何做在创业小厂里做技术领导]]></title>
        <id>https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html</id>
        <link href="https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html"/>
        <updated>2023-05-29T12:53:59.400Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html">如何做在创业小厂里做技术领导</a></p><p><strong>概要：</strong></p><p>这篇文章主要讲述了在创业小厂中如何找到技术研发带头人以及如何管理技术团队。作者认为，技术领导的首要工作是提升团队的短板，可以通过工具、流程、规范等手段来实现。推荐使用 Git、自动化测试、代码静态分析、故障收集等工具来提升代码质量；同时，建议采用敏捷开发方法，包括每日立会、需求评审会、技术评审会等流程来保证团队稳定可靠高效地输出技术产品。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - vadimdemedes/pastel: 🎨类似Next.js的框架，用于用Ink制作的CLI。]]></title>
        <id>https://github.com/vadimdemedes/pastel</id>
        <link href="https://github.com/vadimdemedes/pastel"/>
        <updated>2023-05-29T12:50:43.689Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/vadimdemedes/pastel">GitHub - vadimdemedes/pastel: 🎨 Next.js-like framework for CLIs made with Ink</a></p><p><strong>概要：</strong></p><p>Pastel 是一个基于 Ink 开发的类似于 Next.js 的 CLI 框架。它允许用户在 commands 文件夹中创建文件来添加命令，支持定义选项和参数，并使用 Zod 实现完全类型安全。此外，Pastel 还自动生成命令、选项和参数的帮助信息，并在底层使用经过测试的 Commander 包。Pastel 可以通过 create-pastel-app 快速搭建一个带有 TypeScript、linter 和测试设置的应用程序，也可以手动设置新项目并安装 Pastel 和 TypeScript。 Pastel 支持索引命令、默认命令、子命令和别名，并支持字符串、数字、布尔、枚举、数组和集合等类型的选项和参数。Pastel 还允许用户自定义应用程序名称、描述和版本，并提供了一组 API 来初始化 Pastel 应用程序并运行它们。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React API的演变和代码重用]]></title>
        <id>https://frontendmastery.com/posts/the-evolution-of-react-patterns/</id>
        <link href="https://frontendmastery.com/posts/the-evolution-of-react-patterns/"/>
        <updated>2023-05-29T12:39:54.110Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://frontendmastery.com/posts/the-evolution-of-react-patterns/">The evolution of React APIs and code reuse</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 的演变历程和不同的代码重用模式，深入探讨了它们背后的思维模型和权衡。从最初的 Mixins 到 Higher-order components、Render props 和 Hooks，React 逐渐发展出更加简洁、灵活和易于理解的编程范式。作者指出，React 是一个提供低级原语的库，强调构建在稳定基础之上的架构和模式，以及应该优先考虑用户体验而非开发者体验。同时，随着 React 扩展到客户端和服务器端，我们需要更好地理解全栈 React 的边界和组合方式，以便更好地进行本地推理和代码管理。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我为什么离开拉斯特]]></title>
        <id>https://www.jntrnr.com/why-i-left-rust/</id>
        <link href="https://www.jntrnr.com/why-i-left-rust/"/>
        <updated>2023-05-29T12:36:21.559Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.jntrnr.com/why-i-left-rust/">Why I left Rust</a></p><p><strong>概要：</strong></p><p>文章主要讲述了作者为何离开 Rust 项目。起因是 JeanHeyd Meneide 被选为 RustConf 的主题演讲嘉宾，但由于他在博客中对 Rust 反射的看法引起了一些团队成员的不满，导致 Rust 领导层将其从主题演讲嘉宾降级为普通演讲嘉宾。作者认为这样的行为极度不尊重专家，并且暴露了 Rust 组织的冷酷和无情。此外，JeanHeyd 曾批评 Rust 缺乏黑人代表性，因此作者也认为这次事件背后可能还有更深层次的问题。最后，作者呼吁 Rust 组织要对这次事件负责并采取措施避免类似事件再次发生。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3种方法来找到你最糟糕的页面加载的JavaScript违规者]]></title>
        <id>https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load</id>
        <link href="https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load"/>
        <updated>2023-05-29T12:35:49.355Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://performance.shopify.com/blogs/blog/3-ways-to-find-your-worst-javascript-offenders-for-page-load">3 ways to find your worst JavaScript offenders for page load</a></p><p><strong>概要：</strong></p><p>本文介绍了三种方法来评估 JavaScript 文件在页面加载中的影响。首先，使用 Lighthouse Treemap 根据字节大小排名 JavaScript 文件和模块，以便快速找出最大的依赖项。其次，使用 Chrome Dev Tools 性能选项卡根据脚本运行时间排名单个域的所有脚本。最后，使用 WebPageTest 根据阻塞时间排名脚本来源。作者建议使用这些方法来找到可以快速优化的低垂果实，然后再着手解决更复杂的问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在React Router v6测试中避免嘲弄？]]></title>
        <id>https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/</id>
        <link href="https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/"/>
        <updated>2023-05-29T12:35:28.875Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://webup.org/blog/how-to-avoid-mocking-in-react-router-v6-tests/">How to Avoid Mocking in React Router v6 Tests</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 React Router (v6) 测试应用程序，并提供了一个示例包装函数，以帮助您可靠地测试页面导航。这个包装函数建立在 React Testing Library（RTL）的 render () 函数之上，并抽象了一个数据路由器提供者，以便您可以在不模拟的情况下进行编程测试。文章还介绍了 renderWithRouter 函数的实现和测试用例，并提供了一个 codesandbox 示例。最后，作者提到了关于测试主题的后续计划，包括如何避免 mocking。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React应用中的状态管理]]></title>
        <id>https://reacthandbook.dev/state-management</id>
        <link href="https://reacthandbook.dev/state-management"/>
        <updated>2023-05-29T12:35:04.783Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://reacthandbook.dev/state-management">State Management in React Applications</a></p><p><strong>概要：</strong></p><p>本文介绍了在 React 应用程序中管理应用状态的一种非常灵活的方法。具体而言，这适用于 SPA（单页应用程序）构建架构。本指南的目标受众是 React 工程师和架构师，他们不是初学者，要么正在寻求构建新应用程序的指导，要么正在理解其他人为他们所工作的应用程序做出的决策。本文详细介绍了 5 种不同类型的 React 应用程序状态，并探讨了使用 React API、数据获取库和全局存储来管理这些状态的最佳实践。同时，本文还提到了一些常见的 React 生态系统中的库，如 Redux、Zustand、Jotai 等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你需要多少内存来运行100万个并发任务？]]></title>
        <id>https://pkolaczk.github.io/memory-consumption-of-async/</id>
        <link href="https://pkolaczk.github.io/memory-consumption-of-async/"/>
        <updated>2023-05-29T09:52:11.366Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://pkolaczk.github.io/memory-consumption-of-async/">How Much Memory Do You Need to Run 1 Million Concurrent Tasks?</a></p><p><strong>概要：</strong></p><p>本文对比了异步和多线程编程在 Rust、Go、Java、C#、Python、Node.js 和 Elixir 等流行语言中的内存消耗。作者创建了一个基准程序，通过同时启动 N 个任务并等待它们完成来测试各种语言的内存消耗。结果显示，不同语言的运行时具有不同的权衡，有些轻量级且适用于少量任务，但随着任务数量的增加而扩展性差，而另一些初始开销高，可以轻松处理高工作负载。文章还指出，除了内存消耗之外，任务启动时间和通信速度等其他因素也同样重要。值得注意的是，在启动 100,000 个任务时，有些程序已经无法正常工作。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写总结比读更多的书更重要 - Andreas Fragner]]></title>
        <id>https://www.andreasfragner.com/writing/writing-summaries</id>
        <link href="https://www.andreasfragner.com/writing/writing-summaries"/>
        <updated>2023-05-29T09:51:33.514Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.andreasfragner.com/writing/writing-summaries">Writing summaries is more important than reading more books — Andreas Fragner</a></p><p><strong>概要：</strong></p><p>本文作者认为，阅读并非追求页数或速度，而是要注重理解和思考。为了提高理解能力，读者需要在阅读时自问问题，并尝试回答这些问题。作者建议使用一个简单的框架来写书摘，包括总结书籍主旨、中心问题和个人所学到的重要内容。此外，作者还介绍了两种选择好书的方法：主题阅读和检视阅读。最后，作者提出了另一种分享阅读体验的方式，即与他人讨论所读书籍的思想和观点。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - MineDojo/Voyager：一个具有大型语言模型的开放式体现型代理]]></title>
        <id>https://github.com/MineDojo/Voyager</id>
        <link href="https://github.com/MineDojo/Voyager"/>
        <updated>2023-05-27T06:55:10.187Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/MineDojo/Voyager">GitHub - MineDojo/Voyager: An Open-Ended Embodied Agent with Large Language Models</a></p><p><strong>概要：</strong></p><p>本文介绍了 Voyager，这是一个基于大型语言模型的具有开放式体验的生命学习代理，可以在 Minecraft 中持续探索世界、获得多样化技能并进行新颖的发现。Voyager 包括三个关键组成部分：1）自动课程设置，最大限度地促进探索；2）可执行代码的不断增长的技能库，用于存储和检索复杂行为；3）一种新的迭代提示机制，结合环境反馈、执行错误和自我验证以改进程序。Voyager 通过黑盒查询与 GPT-4 交互，避免了模型参数微调的需要。经验上，Voyager 表现出强大的场景下的生命学习能力，并展示了在玩 Minecraft 方面的卓越熟练度。它获得了比先前 SOTA 更多的独特物品（3.3 倍）、行程更长（2.3 倍），以及解锁关键技术树里程碑的速</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7.22.0版发布：明确的资源管理支持和导入属性解析 - Babel]]></title>
        <id>https://babeljs.io/blog/2023/05/26/7.22.0</id>
        <link href="https://babeljs.io/blog/2023/05/26/7.22.0"/>
        <updated>2023-05-27T04:50:50.460Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://babeljs.io/blog/2023/05/26/7.22.0">7.22.0 Released: Explicit Resource Management support and Import Attributes parsing · Babel</a></p><p><strong>概要：</strong></p><p>Babel 7.22.0 发布了，支持解析 / 转换明确资源管理提案的同步和异步变体，并支持导入属性的解析。此外，更新了装饰器的实现，添加了对 TypeScript 导入和导出语句的支持，以及将所有稳定 ECMAScript 功能的插件从 “-proposal-” 重命名为 “-transform-”。Babel 还提供 Open Collective 捐赠和直接与其合作实现新的 ECMAScript 提案的机会。更新还包括：明确资源管理、导入属性、装饰器更新和重命名软件包等。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - vanjs-org/van: 🍦VanJS（Vanilla JavaScript）：世界上最小的反应式UI框架]]></title>
        <id>https://github.com/vanjs-org/van</id>
        <link href="https://github.com/vanjs-org/van"/>
        <updated>2023-05-26T04:14:24.030Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/vanjs-org/van">GitHub - vanjs-org/van: 🍦VanJS (Vanilla JavaScript): World's smallest reactive UI framework</a></p><p><strong>概要：</strong></p><p>VanJS 是一个超轻量级、零依赖和无偏见的反应式 UI 框架，基于纯粹的 vanilla JavaScript 和 DOM。它提供了声明性 DOM 树组合、可重用组件、响应式状态绑定等功能，类似于 React，但不需要 React、JSX、转换、虚拟 DOM 或任何隐藏逻辑。VanJS 非常容易学习，只有四个导出函数在 API 中，并且提供了 TypeScript 支持。它的打包大小仅为 1.2kB，比大多数流行的 UI 框架小 100 倍以上。VanJS 旨在通过降低 UI 编程的入门门槛来构建更好的世界，没有商业化的意图或计划。如果您发现 VanJS 有趣或将来可能对您有用，请考虑支持该项目。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023年如何免费托管你的副业项目：从Auth到数据库]]></title>
        <id>https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im</id>
        <link href="https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im"/>
        <updated>2023-05-26T04:13:50.663Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://dev.to/livecycle/how-to-host-your-side-projects-for-free-in-2023-from-auth-to-database-42im">How to host your side-projects for free in 2023: from Auth to Database</a></p><p><strong>概要：</strong></p><p>本文介绍了如何在 2023 年免费托管你的项目。涵盖了身份验证、数据库、网站托管、后端托管、定时任务和键值存储等方面。Clerk 可用于处理用户身份验证，PlanetScale 提供 MySQL 数据库服务，Vercel 和 Netlify 可用于网站托管，Fly.io 适用于 Docker 镜像托管，Upstash 则提供定时任务和 Redis 缓存服务。这些服务可以帮助你免费托管你的项目，并且随着你的项目发展，它们也可以进行扩展。这些服务都是基于无服务器技术，因为无服务器技术可以根据需要自动缩放，从而使成本保持低廉。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.34: deno编译支持npm包]]></title>
        <id>https://deno.com/blog/v1.34</id>
        <link href="https://deno.com/blog/v1.34"/>
        <updated>2023-05-26T04:12:29.885Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://deno.com/blog/v1.34">Deno 1.34: deno compile supports npm packages</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Deno 1.34 的更新内容，包括支持 npm 包的 deno compile、在 deno.json 和 CLI 标志中支持 Glob、使用 IP 地址的 TLS 证书等。此外，还有许多改进和错误修复，如配置文件改进、语言服务器改进、Deno API 更改、npm 和 Node 兼容性改进、V8 11.5 和 TypeScript 5.0.4 等。最后，文章还提到了 Deno KV，这是一个全球分布式数据库，现已进入 beta 测试阶段。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node JS与Bun的基准测试]]></title>
        <id>https://decode.sh/benchmarking-node-js-vs-bun</id>
        <link href="https://decode.sh/benchmarking-node-js-vs-bun"/>
        <updated>2023-05-24T00:09:51.755Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://decode.sh/benchmarking-node-js-vs-bun">Benchmarking Node JS vs Bun</a></p><p><strong>概要：</strong></p><p>这篇文章测试了使用 Bun 和 Node 的默认 HTTP 模块进行编译和未编译的性能表现。结果显示，未编译的 Bun 代码是四种方法中最快的，比第二快的未编译 Node 快 250％。尽管 Bun 仍不够稳定并且文档需要改进，但它的速度让人兴奋，可能会在未来的项目中使用。此外，文章还介绍了其他主题，如 Warp Terminal、设置 Node.js 用于生产和 Javascript 循环。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bun v0.6.3]]></title>
        <id>https://bun.sh/blog/bun-v0.6.3</id>
        <link href="https://bun.sh/blog/bun-v0.6.3"/>
        <updated>2023-05-23T16:03:31.793Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://bun.sh/blog/bun-v0.6.3">Bun v0.6.3</a></p><p><strong>概要：</strong></p><p>Bun.js has released support for node:vm, improvements to node:tls and node:http, test.todo(), test timeouts, and better preloading. The release also includes fixes to Bun's bundler, such as a crash when merging adjacent top-level variable declarations, assets copying to an incorrect output path, and minifier bugs involving template literals being incorrectly merged. Additionally, two memory leaks found in fetch() have been fixed, and improvements have been made to console.log(). Changes to WebSocket include a breaking change to publishToSelf behaviour and buffer support in WebSocket messages. Other bug fixes include fs.writeFile({ flag: "a" }) now appending to files instead of overwriting it and N-API finalizers being called with the correct data pointer and finalizer hint.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用TypeScript的React组件库]]></title>
        <id>https://atlassc.net/2023/05/23/react-component-library-with-typescript</id>
        <link href="https://atlassc.net/2023/05/23/react-component-library-with-typescript"/>
        <updated>2023-05-23T11:06:54.357Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://atlassc.net/2023/05/23/react-component-library-with-typescript">React Component Library With TypeScript</a></p><p><strong>概要：</strong></p><p>本文介绍了如何使用 TypeScript 创建 React 组件库的步骤。首先需要创建一个新目录并初始化 npm 包，然后安装必要的依赖项，包括 TypeScript、React 和 Rollup 等。接下来需要创建 tsconfig.json 和 rollup.config.js 文件，并在 src 目录中创建组件文件。最后可以使用 Rollup 进行打包并测试组件库。通过这些步骤，可以轻松地创建自己的基于 TypeScript 的 React 组件库。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿童木2.5 | 阿童木]]></title>
        <id>https://astro.build/blog/astro-250/</id>
        <link href="https://astro.build/blog/astro-250/"/>
        <updated>2023-05-23T11:06:18.103Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://astro.build/blog/astro-250/">Astro 2.5 | Astro</a></p><p><strong>概要：</strong></p><p>Astro 2.5 发布了，其中包括数据集合和引用、混合渲染、自定义客户端指令、HTML 压缩、并行渲染和多态类型助手等功能。数据集合和引用允许用户在 src/content/ 文件夹中存储 JSON 和 YAML 文件，并从其他集合中引用这些数据；混合渲染允许在大多数静态站点中使用服务器路由；自定义客户端指令允许集成作者定义自己的客户端加载机制；HTML 压缩可以选择压缩 Astro 模板；并行渲染可以加速同时进行数据加载的多个组件的渲染；多态类型助手可以定义接受与内置元素相同道具的组件。此外，该版本还包括其他 bug 修复和改进。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更快的Sandpack Transpiler之旅]]></title>
        <id>https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler</id>
        <link href="https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler"/>
        <updated>2023-05-23T11:05:04.827Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://codesandbox.io/blog/the-journey-to-a-faster-sandpack-transpiler">The Journey To a Faster Sandpack Transpiler</a></p><p><strong>概要：</strong></p><p>这篇文章介绍了 Sandpack 团队为了解决性能问题而进行的优化和重构工作。他们一开始使用 babel 和 meriyah 进行转译，但是由于需要在客户端上转译更多的代码，他们寻找了一个更快的转译器，最终选择了 Sucrase。然而，Sucrase 在处理大文件时存在问题，因此他们对其进行了优化和重写，使其比 esbuild 更快。接下来，他们决定使用 Rust 语言重写 Sucrase，以获得更好的内存管理和更高的性能。他们首先重写了解析器，使用 Ropey 库和字符向量来提高性能，然后重写了转换器，使用状态字符迭代器和字符串引用来减少拷贝和提高性能。最终，经过测试，新的 Sucrase 比之前的版本快两倍以上，并且还有更多的优化空间。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Bun.js作为捆绑器]]></title>
        <id>https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/</id>
        <link href="https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/"/>
        <updated>2023-05-23T11:04:24.777Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://shaneosullivan.wordpress.com/2023/05/17/using-bun-js-as-a-bundler/">Using Bun.js as a bundler</a></p><p><strong>概要：</strong></p><p>Bun.js 是一个新的 JavaScript 运行时，旨在实现极速。作者 Jarred Sumner 在 Twitter 上宣布他们已经发布了一个新的代码捆绑器的 beta 版本，展示了与其他捆绑器相比的惊人速度提升。该文章介绍了作者如何使用 Bun.js 来加速他的构建系统，并讨论了他在使用过程中遇到的问题和解决方案。尽管 Bun.js 还处于开发阶段，但其速度和功能使其成为一个非常有用的工具。最后，作者推广了他的一个 iPad / 平板应用程序 KidzFun.art，这是一个适合孩子们画图、做数学题、制作 GIF 等的 PWA 应用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我正在建立一个公司]]></title>
        <id>https://cpojer.net/posts/building-a-company</id>
        <link href="https://cpojer.net/posts/building-a-company"/>
        <updated>2023-05-23T11:00:18.900Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://cpojer.net/posts/building-a-company">I'm Building a Company</a></p><p><strong>概要：</strong></p><p>文章介绍了作者创立的新游戏公司 Nakazawa Tech，以及他们正在制作的第一款游戏 Athena Crisis。作者提到自己希望通过建立这个公司来实现新的个人目标和原则，例如：构建他所希望存在的事物、关注真正重要的事情、创造难忘的体验和艺术等。同时，作者还强调了开源对于公司的重要性，并分享了他们最近发布的一些小型库。最后，作者邀请读者注册早期访问 Athena Crisis，并表示公司正在寻找故事设计师、社区经理和后端托管合作伙伴。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用Sprite-Diffuser修改《帝国时代II》的内容]]></title>
        <id>https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/</id>
        <link href="https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/"/>
        <updated>2023-05-22T08:31:07.811Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.engine.study/blog/modding-age-of-empires-ii-with-a-sprite-diffuser/">Modding Age of Empires II with a Sprite-Diffuser</a></p><p><strong>概要：</strong></p><p>本文介绍了作者如何利用 Stable Diffusion Web UI 和 Python 创建一个多功能的基于提示的图像生成器，以制作自定义文明精灵。作者在 Photoshop 中使用 Alpaca 开始实验，并尝试在不同风格下生成 Age of Empires II 游戏截图，探索模型的行为和选择保留和丢弃的形状和纹理。作者还使用 Control Net 和 Loopbacks 等技术来优化输出结果，并提出了一些其他的实验和思考。最终，作者认为这种模型非常灵活，未来的游戏可以利用它来种植用户生成的故事或内部开发。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - imartinez/privateGPT: 利用GPT的力量私下与你的文件互动，100%私下进行，没有数据泄露。]]></title>
        <id>https://github.com/imartinez/privateGPT</id>
        <link href="https://github.com/imartinez/privateGPT"/>
        <updated>2023-05-22T05:48:32.440Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/imartinez/privateGPT">GitHub - imartinez/privateGPT: Interact privately with your documents using the power of GPT, 100% privately, no data leaks</a></p><p><strong>概要：</strong></p><p>本文介绍了一种使用 LLMs 进行离线问答的方法，完全私密，不需要互联网连接。用户可以将文件导入并提出问题，而无需互联网连接。该方法使用 LangChain、GPT4All、LlamaCpp、Chroma 和 SentenceTransformers 构建。用户需要设置环境并下载 LLM 模型，然后将数据集放入指定目录中，支持多种格式的文件。用户可以使用命令行工具提出问题，并且可以使用命令行参数修改脚本的行为。该方法使用本地模型和 LangChain 的强大功能，在不泄露任何数据的情况下运行整个流程，并具有合理的性能。但是，该方法仅用于测试，不适用于生产环境，选择的模型也不是针对性能优化的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一个站点]]></title>
        <id>https://www.engineersneedart.com/blog/samestop/samestop.html</id>
        <link href="https://www.engineersneedart.com/blog/samestop/samestop.html"/>
        <updated>2023-05-22T05:46:55.519Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://www.engineersneedart.com/blog/samestop/samestop.html">Same Stop</a></p><p><strong>概要：</strong></p><p>这篇文章讲述了一位前苹果程序员退休后又重新开始编程的经历。虽然最初他感到解脱，但不久之后又开始尝试用 Python 和 Javascript 写小项目。现在他突然重返编程世界，重新沉迷于 C 语言和游戏开发。他回顾了自己从事编程的经历，并思考了编程对于工程师们来说是一份工作还是一种爱好。他认为，早期的程序员都是出于热情而从事编程的，但现在的工程师们可能更多地将其视为一份工作。最后，他对自己重返编程世界的经历感到惊讶和欣喜，同时也提醒自己要注意保持平衡。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub - pengxiao-song/LaWGPT: 🎉 Repo for LaWGPT, Chinese-Llama tuned with Chinese Legal knowledge. 基于中文法律知识的大语言模型]]></title>
        <id>https://github.com/pengxiao-song/LaWGPT</id>
        <link href="https://github.com/pengxiao-song/LaWGPT"/>
        <updated>2023-05-22T03:03:46.056Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/pengxiao-song/LaWGPT">GitHub - pengxiao-song/LaWGPT: 🎉 Repo for LaWGPT, Chinese-Llama tuned with Chinese Legal knowledge. 基于中文法律知识的大语言模型</a></p><p><strong>概要：</strong></p><p>LaWGPT 是一系列基于中文法律知识的开源大语言模型，通过扩充法律领域专有词表和大规模中文法律语料预训练，增强了大模型在法律领域的基础语义理解能力。在此基础上，构造法律领域对话问答数据集、中国司法考试数据集进行指令精调，提升了模型对法律内容的理解和执行能力。该项目持续开展，法律领域数据集及系列模型后续相继开源。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[健康学习到150岁 - 人体系统调优不完全指南]]></title>
        <id>https://github.com/zijie0/HumanSystemOptimization</id>
        <link href="https://github.com/zijie0/HumanSystemOptimization"/>
        <updated>2023-05-22T02:14:38.416Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://github.com/zijie0/HumanSystemOptimization">健康学习到150岁 - 人体系统调优不完全指南</a></p><p><strong>概要：</strong></p><p>本文介绍了神经科学教授 Andrew Huberman 的一些关于提升日常工作、学习表现的方法和工具。其中睡眠是最重要的前提，生物钟对睡眠的控制机理是光照和体温。因此，控制接收光照的时间点、类型和时长以及保持适当的体温可以提升睡眠质量。其他实践包括锻炼、饮食、呼吸和注意力训练等方面。这些方法都基于高质量、peer reviewed 的科学研究成果，可以像调优软件程序那样来 “调优” 我们自身的人体系统。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React服务器组件、Next.js应用程序路由器和实例]]></title>
        <id>https://addyosmani.com/blog/react-server-components-app-router/</id>
        <link href="https://addyosmani.com/blog/react-server-components-app-router/"/>
        <updated>2023-05-22T01:58:11.076Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://addyosmani.com/blog/react-server-components-app-router/">React Server Components, Next.js App Router and examples</a></p><p><strong>概要：</strong></p><p>本文介绍了 React 社区最近关于 Server Components、Next.js App Router 和工具与渲染方法未来的讨论，以及对这些概念的简要总结。文章解释了什么是 React Server Components，它们与 Next.js App Router 的关系，以及为什么选择生产框架（如 Next.js 或 Remix）而不是 Create React App。文章还提到了 RSC 实现的可用性和 “混合” 渲染的趋势，即将构建时间、服务器和客户端渲染相结合，创造更灵活的 Web 开发方法。最后，文章推荐了一些 RSC + Next App Router 的示例。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[把Python当作Rust来写]]></title>
        <id>https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html</id>
        <link href="https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html"/>
        <updated>2023-05-22T01:57:30.687Z</updated>
        <content type="html"><![CDATA[<p><strong>原文：</strong></p><p><a href="https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html">Writing Python like it's Rust</a></p><p><strong>概要：</strong></p><p>本文介绍了作者在使用 Rust 后如何将其中的一些概念应用到 Python 编程中，以提高程序的严谨性和可读性。具体来说，作者建议在函数签名和类属性中尽可能使用类型提示，使用 dataclass 代替元组或字典，使用 union type 模拟 Rust 中的 algebraic data types，使用 newtype 提高代码的可读性，使用构造函数代替 __init__ 方法，并使用类型系统来编码不变量。通过这些方法，作者认为可以减少代码中的错误和 bug，提高代码的可维护性和可扩展性。</p>]]></content>
    </entry>
</feed>